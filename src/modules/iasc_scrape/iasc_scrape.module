<?php
/**
 * @file
 * Customizations for IASC Scrape, if needed.
 */

/**
 * Implements hook_init().
 */
function iasc_scrape_init() {
  require __DIR__ . '/IASC/vendor/autoload.php';
}

/**
 * Implements hook_menu().
 */
function iasc_scrape_menu() {
  $items = array();

  $items['admin/iasc-scrape'] = array(
    'title' => 'Scrape IASC',
    'page callback' => 'iasc_scrape_scrape',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

function iasc_scrape_scrape() {
  $output = array();
  // Initially set credential values.
  $username = $password = '';

  // Grab custom login credentials if set.
  if (file_exists(__DIR__ . '/IASC/creds.php')) {
    require __DIR__ . '/IASC/creds.php';
  }

  $login = new IASC\Login($username, $password);

  $crawler = $login->crawler;
  $client = $login->client;

  for ($j = 1; $j < 4; $j++) {
    for ($i = 1; $i < 3; $i++) {
      $contact = new IASC\Element\ContactElement($client, $crawler, $i, $j);
      $values = array(
        'legacy_id' => $contact->getLegacyId('contactid'),
        'type' => 'contact',
        'legacy_url' => $contact->getUrl(),
        'data' => serialize($contact->getValues()),
        'scrape' => 1,
      );
      iasc_scrape_save($values);
      $output[] = $contact->getLegacyId('contactid');
    }
  }

  return implode('<br />', $output);
}

function iasc_scrape_save($values) {
  $record = $values;

  // Set changed date.
  $record['changed'] = REQUEST_TIME;

  // Save record.
  if (!empty($record['data'])) {
    db_merge('iasc_scrape')
      ->key(array('legacy_id' => $record['legacy_id']))
      ->fields($record)
      ->execute();
  }

}
