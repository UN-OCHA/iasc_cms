<?php
/**
 * @file
 * Customizations for IASC Scrape, if needed.
 */

/**
 * Main callback for scraping the old IASC site.
 */
function iasc_scrape_scrape($type, $page = 1, $position = 1) {
  if (file_exists(__DIR__ . '/IASC/vendor/autoload.php')) {
    require __DIR__ . '/IASC/vendor/autoload.php';
  }
  else {
    throw new Exception(t('Composer needs to be run to generate the autoload of classes.'));
  }

  // Initially set credential values.
  $username = $password = '';

  // Grab custom login credentials if set.
  if (file_exists(__DIR__ . '/IASC/creds.php')) {
    require __DIR__ . '/IASC/creds.php';
  }
  else {
    throw new Exception(t('Credentials needed to login.'));
  }

  $login = new IASC\Login($username, $password);

  $crawler = $login->crawler;
  $client = $login->client;

  // @TODO: May want to think of a better way to change types.
  switch ($type) {
    case 'contact':
      $element = new IASC\Element\ContactElement($client, $crawler, $page, $position);
      $id = 'contactid';
      break;

    case 'meeting':
      $element = new IASC\Element\MeetingElement($client, $crawler, $page, $position);
      $id = 'meetingid';
      break;

    case 'news':
      $element = new IASC\Element\NewsElement($client, $crawler, $page, $position);
      $id = 'newsid';
      break;

    case 'document':
      $element = new IASC\Element\DocumentElement($client, $crawler, $page, $position);
      $id = 'documentid';
      $legacy_meeting_id = 0;
      $values = $element->getValues();
      // Get legacy filename and file_id.
      if ($values['file_id_pdf']) {
        $legacy_fid = $values['file_id_pdf'];
        $filename = $values['file_text_pdf']['filename'];
        $file_url = $values['file_text_pdf']['file_link'];
      }
      elseif ($values['file_id_other']) {
        $legacy_fid = $values['file_id_other'];
        $filename = $values['file_text_other']['filename'];
        $file_url = $values['file_text_other']['file_link'];
      }

      // Get legacy meeting id for agenda connecting.
      if ($values['field_linked_meeting']) {
        $legacy_meeting_url = $values['field_linked_meeting'];
        preg_match("/(?=meetingid\=)?\d+/", $legacy_meeting_url, $id);
        $legacy_meeting_id = (isset($id[0])) ? $id[0] : 0;
      }

      if (isset($legacy_fid)) {
        $additional_values = array(
          'legacy_fid' => $legacy_fid,
          'filename' => $filename,
          'file_url' => $file_url,
          'legacy_meeting_id' => $legacy_meeting_id,
        );
      }
      break;

    case 'product':
      $element = new IASC\Element\ProductElement($client, $crawler, $page, $position);
      $id = 'productid';
      $values = $element->getValues();
      // Get legacy filename and file_id.
      if ($values['file_id_pdf']) {
        $legacy_fid = $values['file_id_pdf'];
        $filename = $values['file_text_pdf']['filename'];
        $file_url = $values['file_text_pdf']['file_link'];
      }
      if (isset($legacy_fid)) {
        $additional_values = array(
          'legacy_fid' => $legacy_fid,
          'filename' => $filename,
          'file_url' => $file_url,
        );
      }
      break;
  }

  $values = array(
    'legacy_id' => $element->getLegacyId($id),
    'type' => $type,
    'legacy_url' => $element->getUrl(),
    'data' => serialize($element->getValues()),
    'scrape' => 1,
  );

  if (isset($additional_values)) {
    $values += $additional_values;
  }

  iasc_scrape_save($values);

  drupal_set_message(
    t('Element @legacy_id at @legacy_url of type @type imported from page @page at position @position',
      array(
        '@legacy_id' => $values['legacy_id'],
        '@legacy_url' => $values['legacy_url'],
        '@type' => $values['type'],
        '@page' => $page,
        '@position' => $position,
      )
    )
  );

  // Set next index value.
  iasc_scrape_set_index($type, $page, $position);
  $index = iasc_scrape_get_index($type);
  drupal_set_message(
    t('For @type, next: page - @page, position - @position',
      array(
        '@type' => $type,
        '@page' => $index['page'],
        '@position' => $index['position'],
      )
    )
  );
}

/**
 * Save values to the database.
 */
function iasc_scrape_save($values) {
  $record = $values;

  // Set changed date.
  $record['changed'] = REQUEST_TIME;

  // Save record.
  if (!empty($record['data'])) {
    db_merge('iasc_scrape')
      ->key(array(
        'legacy_id' => $record['legacy_id'],
        'type' => $values['type'],
      ))
      ->fields($record)
      ->execute();
  }
}

/**
 * Set the index of a type so we can crawl.
 */
function iasc_scrape_set_index($type, $page, $position) {
  // Each page on old IASC has no more than 20 elements.
  if ($position >= 20) {
    $position = 1;
    $page++;
  }
  else {
    $position++;
  }
  variable_set('iasc_' . $type . '_index',
    array(
      'type' => $type,
      'page' => $page,
      'position' => $position,
    )
  );
}

/**
 * Get the index for an element type.
 */
function iasc_scrape_get_index($type) {
  $index = variable_get('iasc_' . $type . '_index');
  $page = (isset($index['page'])) ? $index['page'] : 1;
  $position = (isset($index['position'])) ? $index['position'] : 1;
  return array(
    'type' => $type,
    'page' => $page,
    'position' => $position,
  );
}

/**
 * Save the node.
 */
function iasc_scrape_save_node($type) {
  if (class_exists('IASC' . ucfirst($type))) {
    $values = iasc_scrape_get_scraped_element($type);
    $class = 'IASC' . ucfirst($type);
    $node = new $class($values);
    $node = $node->entity;
    iasc_scrape_update($values['legacy_id'], $node->nid, $type);
    drupal_set_message(t(
      '@type (@nodetype) saved. Nid: @nid Title: @title',
      array(
        '@type' => ucfirst($type),
        '@nodetype' => $node->type,
        '@nid' => $node->nid,
        '@title' => $node->title,
      )
    ));
  }
}

/**
 * Save the agenda.
 */
function iasc_scrape_save_agenda($nid) {
  if (!isset($nid)) {
    // Get the next agenda to save.
    $values = iasc_scrape_get_scraped_element('agenda');

    // Get legacy meeting id from next up agenda item.
    $legacy_meeting_id = iasc_scrape_get_meeting_from_agenda($values['legacy_id']);
  }
  else {
    $legacy_meeting_id = iasc_scrape_get_legacy_meeting($nid);
  }

  // Get all agenda items associated with legacy meeting.
  $agenda_items = iasc_scrape_all_agenda_items($legacy_meeting_id);

  // Get existing meeting from legacy meeting id.
  $meeting_id = iasc_scrape_get_meeting($legacy_meeting_id);

  // Wrap meeting with Entity API.
  $meeting = node_load($meeting_id);
  drush_print(t('Loading meeting @nid', array('@nid' => $meeting->nid)));

  $meeting_wrapper = entity_metadata_wrapper('node', $meeting);

  // Set agenda items with order.
  // Get all documents associated.
  // Assign documents to first agenda item.
  iasc_scrape_set_agenda_items($meeting_wrapper, $agenda_items);

  // Save the meeting with updated info.
  $meeting_wrapper->save();
  entity_save('node', $meeting);

  drupal_set_message(t(
    '@type saved on Meeting. Nid: @nid Title: @title',
    array(
      '@type' => 'Agenda',
      '@nid' => $meeting->nid,
      '@title' => $meeting->title,
    )
  ));

  // Update the scrape table.
  foreach ($agenda_items as $agenda_item) {
    iasc_scrape_update($agenda_item->agendaID, $meeting->nid, 'agenda');
  }
}

/**
 * Get the legacy meeting id from an agenda id.
 */
function iasc_scrape_get_meeting_from_agenda($agenda_id) {
  $result = db_select('iasc_scrape_agendas', 'sca')
    ->fields('sca', array('calmeetID'))
    ->condition('agendaID', $agenda_id)
    ->execute()
    ->fetchAssoc();

  return $result['calmeetID'];
}

/**
 * Get all agenda items from a legacy meeting.
 */
function iasc_scrape_all_agenda_items($legacy_meeting_id) {
  $result = db_select('iasc_scrape_agendas', 'sca')
    ->fields('sca', array(
      'agendaID',
      'calmeetID',
      'agorder',
      'agitem',
      'agsubitem',
      'agdescription',
      'presenterID',
    ))
    ->condition('calmeetID', $legacy_meeting_id)
    ->orderBy('agorder', 'ASC')
    ->execute()
    ->fetchAllAssoc('agorder');

  return $result;
}

/**
 * Get the meeting id from a legacy meeting id.
 */
function iasc_scrape_get_meeting($legacy_meeting_id) {
  $result = db_select('iasc_scrape', 'sc')
    ->fields('sc', array('entity_id'))
    ->condition('legacy_id', $legacy_meeting_id)
    ->condition('type', 'meeting')
    ->execute()
    ->fetchAssoc();

  return $result['entity_id'];
}

/**
 * Get the legacy meeting id from a meeting id.
 */
function iasc_scrape_get_legacy_meeting($meeting_id) {
  $result = db_select('iasc_scrape', 'sc')
    ->fields('sc', array('legacy_id'))
    ->condition('entity_id', $meeting_id)
    ->condition('type', 'meeting')
    ->execute()
    ->fetchAssoc();

  return $result['legacy_id'];
}

/**
 * Get the latest element scrape that isn't saved.
 *
 * This is marked by status = 0.
 */
function iasc_scrape_get_scraped_element($type) {
  $result = db_select('iasc_scrape', 'sc')
    ->fields('sc', array('legacy_id', 'entity_id', 'data'))
    ->condition('type', $type)
    ->condition('status', 0)
    ->range(0, 1)
    ->execute()
    ->fetchAssoc();

  $data = unserialize($result['data']);
  return array(
    'legacy_id' => $result['legacy_id'],
    'entity_id' => $result['entity_id'],
    'data' => $data,
  );
}

/**
 * Get the latest file scrape that isn't saved.
 *
 * This is marked by file_save = 0.
 */
function iasc_scrape_get_scraped_legacy_fid() {
  $result = db_select('iasc_scrape', 'sc')
    ->fields('sc', array('legacy_fid'))
    ->condition('type', array('document', 'product'), 'IN')
    ->condition('file_save', 0)
    ->condition('legacy_fid', 0, '<>')
    ->range(0, 1)
    ->execute()
    ->fetchAssoc();

  return ($result['legacy_fid']) ? $result['legacy_fid'] : 0;
}

/**
 * Update the row to set that it's scraped.
 */
function iasc_scrape_update($legacy_id, $entity_id, $type) {
  db_merge('iasc_scrape')
    ->key(array(
      'legacy_id' => $legacy_id,
      'type' => $type,
    ))
    ->fields(array(
      'status' => 1,
      'entity_id' => $entity_id,
    ))
    ->execute();
}

/**
 * Update the row to set that file has been saved.
 */
function iasc_scrape_update_legacy_fid($legacy_fid) {
  db_merge('iasc_scrape')
    ->key(array('legacy_fid' => $legacy_fid))
    ->fields(array(
      'file_save' => 1,
    ))
    ->execute();
}

/**
 * Set agenda items.
 */
function iasc_scrape_set_agenda_items(&$meeting_wrapper, $agenda_items) {
  foreach ($agenda_items as $key => $agenda_item) {
    // Get the item from the field collection.

    // Delete all existing items.
    $meeting_wrapper->field_agenda_items = NULL;

    // Prepare collection.
    $collection = entity_create('field_collection_item', array('field_name' => 'field_agenda_items'));
    $collection->setHostEntity('node', $meeting_wrapper->value());
    $agenda_wrapper = entity_metadata_wrapper('field_collection_item', $collection);

    drush_print(t('Loading legacy agenda item @legacy_agenda_id', array(
      '@legacy_agenda_id' => $agenda_item->agendaID,
    )));

    if (!iasc_scrape_blank_or_null($agenda_item->agitem)) {
      // If title is longer than 255, split into description.
      $title = $agenda_item->agitem;
      if (strlen($title) > 255) {
        $split_title = explode(' ', $title, 2);
        $title = $split_title[0];
      }
      $agenda_wrapper->field_ai_title = $title;
    }

    $description = array();
    if (!iasc_scrape_blank_or_null($agenda_item->agsubitem)) {
      $description[] = $agenda_item->agsubitem;
    }
    if (!iasc_scrape_blank_or_null($agenda_item->agdescription)) {
      if (isset($split_title[1])) {
        $description[] = $split_title[1];
      }
      $description[] = $agenda_item->agdescription;
    }

    $description = (count($description) > 1) ? implode(' ', $description) : $description;
    $description = (is_array($description)) ? reset($description) : $description;
    if (!iasc_scrape_blank_or_null($description)) {
      $agenda_wrapper->field_ai_description = array('value' => $description);
    }

    // Set contact.
    $contact_id = iasc_contact_get_nid_by_legacyid($agenda_item->presenterID);
    if (!iasc_scrape_blank_or_null($contact_id)) {
      $agenda_wrapper->field_contact = array($contact_id);
    }

    // Get all documents for agenda.
    $documents = iasc_scrape_get_documents_by_agendaid($agenda_item->agendaID);
    if (!iasc_scrape_blank_or_null($documents)) {
      $agenda_wrapper->field_referenced_docs = $documents;
    }
    else {
      $agenda_wrapper->field_referenced_docs = NULL;
    }

    // Save the changes to the entity.
    $agenda_wrapper->save();
  }
}

/**
 * Grab document entities by the legacy id of the agenda.
 */
function iasc_scrape_get_documents_by_agendaid($agenda_id) {
  $result = db_select('iasc_scrape', 'sc')
    ->fields('sc', array('entity_id', 'data'))
    ->condition('type', 'document')
    ->condition('legacy_agenda_id', $agenda_id)
    ->orderBy('legacy_agenda_id', 'ASC')
    ->execute()
    ->fetchAllAssoc('entity_id');

  return array_keys($result);
}

/**
 * Check if blank or null.
 */
function iasc_scrape_blank_or_null($field) {
  $blank = TRUE;
  if (!empty($field)) {
    if ($field != 'NULL') {
      if ($field != '') {
        $blank = FALSE;
      }
    }
  }
  return $blank;
}
