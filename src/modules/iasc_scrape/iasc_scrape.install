<?php
/**
 * @file
 * IASC Scrape schema.
 */

/**
 * Implements hook_schema().
 */
function iasc_scrape_schema() {
  $schema['iasc_scrape'] = array(
    'description' => 'The base table for scraped data from the old IASC site.',
    'fields' => array(
      'id' => array(
        'description' => 'The primary identifier for a scrape record.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'legacy_id' => array(
        'description' => 'The legacy id from the old IASC site.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'legacy_fid' => array(
        'description' => 'The legacy file id from the old IASC site.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'legacy_meeting_id' => array(
        'description' => 'The legacy meeting id from the old IASC site.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'legacy_agenda_id' => array(
        'description' => 'The legacy agenda id from the old IASC site.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'entity_id' => array(
        'description' => 'The entity id of the saved Drupal entity.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'managed_fid' => array(
        'description' => 'The managed file id of the saved file.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'type' => array(
        'description' => 'The type from the old IASC site.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'legacy_url' => array(
        'description' => 'The url of the item on the old IASC site.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'status' => array(
        'description' => 'Boolean indicating whether an entity exists in Drupal.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'scrape' => array(
        'description' => 'Boolean indicating whether the item is scraped.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'file_save' => array(
        'description' => 'Boolean indicating whether the file was saved.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'The Unix timestamp when the record was most recently saved.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'data' => array(
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'big',
        'description' => 'Serialized array of data to be saved.',
      ),
      'file_url' => array(
        'description' => 'The url of a file saved (if a file was saved).',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'filename' => array(
        'description' => 'The name of a file saved (if a file was saved).',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'indexes' => array(
      'legacy_id' => array('legacy_id'),
      'entity_id' => array('entity_id'),
      'legacy_meeting_id' => array('legacy_meeting_id'),
      'legacy_agenda_id' => array('legacy_agenda_id'),
    ),
    'primary key' => array('id'),
  );
  return $schema;
}

/**
 * Install IASC scrape schema.
 */
function iasc_scrape_update_7001() {
  drupal_install_schema('iasc_scrape');
}

/**
 * Add file fields for IASC scrape schema.
 */
function iasc_scrape_update_7002() {
  $fields = array(
    'legacy_fid' => array(
      'description' => 'The legacy file id from the old IASC site.',
      'type' => 'int',
      'unsigned' => TRUE,
      'not null' => TRUE,
      'default' => 0,
    ),
    'managed_fid' => array(
      'description' => 'The managed file id of the saved file.',
      'type' => 'int',
      'unsigned' => TRUE,
      'not null' => TRUE,
      'default' => 0,
    ),
    'file_save' => array(
      'description' => 'Boolean indicating whether the file was saved.',
      'type' => 'int',
      'not null' => TRUE,
      'default' => 0,
    ),
    'filename' => array(
      'description' => 'The name of a file saved (if a file was saved).',
      'type' => 'varchar',
      'length' => 255,
      'not null' => TRUE,
      'default' => '',
    ),
  );

  foreach ($fields as $fieldname => $field_data) {
    db_add_field('iasc_scrape', $fieldname, $field_data);
  }
}

/**
 * Add legacy meeting id field for IASC scrape schema.
 */
function iasc_scrape_update_7003() {
  $fields = array(
    'legacy_meeting_id' => array(
      'description' => 'The legacy meeting id from the old IASC site.',
      'type' => 'int',
      'unsigned' => TRUE,
      'not null' => TRUE,
      'default' => 0,
    ),
  );

  foreach ($fields as $fieldname => $field_data) {
    db_add_field('iasc_scrape', $fieldname, $field_data);
  }
}

/**
 * Add legacy_id, entity_id, legacy_meeting_id indexes.
 */
function iasc_scrape_update_7004() {
  db_add_index('iasc_scrape', 'legacy_id', array('legacy_id'));
  db_add_index('iasc_scrape', 'entity_id', array('entity_id'));
  db_add_index('iasc_scrape', 'legacy_meeting_id', array('legacy_meeting_id'));
}

/**
 * Add agenda items to scrape table.
 */
function iasc_scrape_update_7005() {
  $result = db_query("SELECT agendaID FROM {iasc_scrape_agendas} isa")
    ->fetchAll();

  if (is_array($result)) {
    $query = db_insert('iasc_scrape')
      ->fields(array(
        'status',
        'scrape',
        'legacy_id',
        'data',
        'type',
      ));
    foreach ($result as $agenda_item) {
      $query->values(array(
        'status' => 0,
        'scrape' => 1,
        'legacy_id' => $agenda_item->agendaID,
        'data' => serialize(array()),
        'type' => 'agenda',
      ));
    }
    $query->execute();
  }
}

/**
 * Add legacy agenda id field for IASC scrape schema.
 */
function iasc_scrape_update_7006() {
  $fields = array(
    'legacy_agenda_id' => array(
      'description' => 'The legacy agenda id from the old IASC site.',
      'type' => 'int',
      'unsigned' => TRUE,
      'not null' => TRUE,
      'default' => 0,
    ),
  );

  foreach ($fields as $fieldname => $field_data) {
    db_add_field('iasc_scrape', $fieldname, $field_data);
  }

  db_add_index('iasc_scrape', 'legacy_agenda_id', array('legacy_agenda_id'));
}

/**
 * Add agenda ids to scrape table.
 */
function iasc_scrape_update_7007() {
  $result = db_query("SELECT entity_id, data FROM {iasc_scrape} isc WHERE type = 'document'")
    ->fetchAll();

  if (is_array($result)) {
    foreach ($result as $document) {
      $data = unserialize($document->data);
      $linked_agenda = $data['field_linked_agendas'];

      // Grab the id.
      preg_match("/(?=agendaid\=)?\d+/", $linked_agenda, $id);
      $legacy_agenda_id = isset($id[0]) ? $id[0] : 0;
      db_merge('iasc_scrape')
        ->key(array(
          'entity_id' => $document->entity_id,
          'type' => 'document',
        ))
        ->fields(array(
          'legacy_agenda_id' => (0 != $legacy_agenda_id) ? ($legacy_agenda_id) : 0,
        ))
        ->execute();
    }
  }
}

/**
 * Implements hook_update_N().
 *
 * Update node authoring date on Documents, Announcements, Meetings.
 */
function iasc_scrape_update_7008() {
  /*
   * In order to use the "More recently created" solr bias, we need to have
   * proper authoring date match up to the "Published Date" for
   * Documents/Products and Announcements and "Event Date" for Meetings.
   */

  /*
   * Get all of the Documents/Products where the
   * authoring date != published date.
   */
  $result = db_query("
    SELECT n.nid FROM {field_data_field_published_date} d
    LEFT JOIN {node} n ON n.nid = d.entity_id
    WHERE n.type IN ('oa_wiki_page', 'announcement')
    AND n.created != UNIX_TIMESTAMP(d.field_published_date_value)
    ORDER BY n.nid ASC
  ")
    ->fetchCol();

  if (isset($result)) {
    print 'Updating ' . count($result) . " document and announcement nodes\n";
    $nodes = node_load_multiple($result);

    foreach ($nodes as $node) {
      $created = new DateTime('@' . $node->created);
      $date = new DateTime($node->field_published_date[LANGUAGE_NONE][0]['value']);
      $timestamp = $date->format('U');

      if ($created->format('Y-m-d H:i:s') != $date->format('Y-m-d H:i:s') && $timestamp > 0) {
        $node->created = $timestamp;
        node_save($node);
        print "Updated {$node->nid}\n";
      }
    }
  }

  // Get all of the Meetings where the authoring date != event date.
  $result = db_query("
    SELECT n.nid FROM {field_data_field_oa_date} d
    LEFT JOIN {node} n ON n.nid = d.entity_id
    WHERE n.type = 'oa_event'
    AND n.created != d.field_oa_date_value
    ORDER BY n.nid ASC
  ")
    ->fetchCol();

  if (isset($result)) {
    print 'Updating ' . count($result) . " meeting nodes\n";
    $nodes = node_load_multiple($result);

    foreach ($nodes as $node) {
      $created = new DateTime('@' . $node->created);
      $date = new DateTime('@' . $node->field_oa_date[LANGUAGE_NONE][0]['value']);

      if ($node->field_oa_date[LANGUAGE_NONE][0]['value'] > 0 &&
        ($created->format('Y-m-d H:i:s') != $date->format('Y-m-d H:i:s'))) {
        $node->created = $node->field_oa_date[LANGUAGE_NONE][0]['value'];
        node_save($node);
        print "Updated {$node->nid}\n";
      }
    }
  }
}
