<?php

/**
 * @file
 * Install file for IASC Configuration.
 */

/**
 * Implements hook_install().
 */
function iasc_configuration_install() {
  // Disable the tour modules as we don't need them.
  module_disable(array('bootstrap_tour'));

  oa_buttons_create_term('section_type', 'Document Section', 'Allows users to create <em>Documents</em> and displays a list for others to read.', array('oa_wiki_page'), 'node:oa_section:document_section');

  // We have to make these changes because the following are faux features.
  $space = node_type_load('oa_space');
  $t = get_t();
  $space->title_label = $t('Full Name');
  $space->modified = TRUE;
  node_type_save($space);

  // Setup default nodequeues for: Featured products, Homepage nodes, and
  // special announcements.
  _iasc_configuration_default_nodequeues();
}

/**
 * Implements hook_update_N().
 *
 * Remove authoring bodies field from all content types.
 */
function iasc_configuration_update_7000() {
  // Remove authoring bodies field from all content types.
  field_delete_field('field_authoring_bodies');
  field_purge_batch(10);
}

/**
 * Implements hook_update_N().
 *
 * Update node title label + remove parent space nodes.
 */
function iasc_configuration_update_7001() {
  // We have to make these changes because the following are faux features.
  $space = node_type_load('oa_space');
  $t = get_t();
  $space->title_label = $t('Full Name');
  $space->modified = TRUE;
  node_type_save($space);

  // Remove space parent for Subsidiary Bodies.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'oa_space')
    ->propertyCondition('title', array('Subsidiary Bodies', 'Principals'))
    ->propertyOrderBy('nid', 'ASC');

  $result = $query->execute();

  if (isset($result['node'])) {
    $nids = array_keys($result['node']);
    $nodes = node_load_multiple($nids);
    foreach ($nodes as $node) {
      $node->oa_parent_space = array();
      node_save($node);
    }
  }
}

/**
 * Implements hook_update_N().
 *
 * Add default nodequeues for Featured products, Homepage featured nodes, and
 * special announcements.
 */
function iasc_configuration_update_7002() {
  _iasc_configuration_default_nodequeues();
}

/**
 * Helper function that creates the default nodequeues.
 */
function _iasc_configuration_default_nodequeues() {
  $queue = nodequeue_load_queue_by_name('featured_products');
  if (!$queue) {
    $nodequeue = new stdClass();
    $nodequeue->name = 'featured_products';
    $nodequeue->title = 'Featured Products';
    $nodequeue->subqueue_title = '';
    $nodequeue->size = 0;
    $nodequeue->link = '';
    $nodequeue->link_remove = '';
    $nodequeue->owner = 'nodequeue';
    $nodequeue->show_in_links = 0;
    $nodequeue->show_in_tab = 1;
    $nodequeue->show_in_ui = 1;
    $nodequeue->i18n = 0;
    $nodequeue->reverse = 0;
    $nodequeue->reference = 0;
    $nodequeue->subqueues = 1;
    $nodequeue->roles = array();
    $nodequeue->types = array('oa_wiki_page');
    $nodequeue->add_subqueue = array('Featured Products');

    nodequeue_save($nodequeue);
  }

  $queue = nodequeue_load_queue_by_name('featured_home');
  if (!$queue) {
    $nodequeue = new stdClass();
    $nodequeue->name = 'featured_home';
    $nodequeue->title = 'Featured on Home';
    $nodequeue->subqueue_title = '';
    $nodequeue->size = 0;
    $nodequeue->link = '';
    $nodequeue->link_remove = '';
    $nodequeue->owner = 'nodequeue';
    $nodequeue->show_in_links = 0;
    $nodequeue->show_in_tab = 1;
    $nodequeue->show_in_ui = 1;
    $nodequeue->i18n = 0;
    $nodequeue->reverse = 0;
    $nodequeue->reference = 0;
    $nodequeue->subqueues = 1;
    $nodequeue->roles = array();
    $nodequeue->types = array('announcement');
    $nodequeue->add_subqueue = array('Featured on Home');

    nodequeue_save($nodequeue);
  }

  $queue = nodequeue_load_queue_by_name('special_announcements');
  if (!$queue) {
    $nodequeue = new stdClass();
    $nodequeue->name = 'special_announcements';
    $nodequeue->title = 'Special Announcements';
    $nodequeue->subqueue_title = '';
    $nodequeue->size = 0;
    $nodequeue->link = '';
    $nodequeue->link_remove = '';
    $nodequeue->owner = 'nodequeue';
    $nodequeue->show_in_links = 0;
    $nodequeue->show_in_tab = 1;
    $nodequeue->show_in_ui = 1;
    $nodequeue->i18n = 0;
    $nodequeue->reverse = 0;
    $nodequeue->reference = 0;
    $nodequeue->subqueues = 1;
    $nodequeue->roles = array();
    $nodequeue->types = array('announcement');
    $nodequeue->add_subqueue = array('Special Announcements');

    nodequeue_save($nodequeue);
  }
}

/**
 * Implements hook_update_N().
 *
 * Lower module weight so that our form alter comes after oa_subspaces.module's.
 */
function iasc_configuration_update_7003() {
  // Get the weight of the oa_subspaces module.
  $weight = db_select('system', 's')
    ->fields('s', array('weight'))
    ->condition('name', 'oa_subspaces', '=')
    ->execute()
    ->fetchField();

  /*
  Set our module to a weight 1 heavier, so ours moves lower in execution order.
  */
  db_update('system')
    ->fields(array('weight' => $weight + 1))
    ->condition('name', 'iasc_configuration', '=')
    ->execute();
}

/**
 * Implements hook_update_N().
 *
 * Change the titles of public Documents, Meetings, and News sections.
 */
function iasc_configuration_update_7004() {
  // Public sections should also include the text: (Public) in the node title.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'oa_section')
    ->propertyCondition('title', array('Documents', 'Meetings',
    'News'))
    ->propertyOrderBy('nid', 'ASC');

  $result = $query->execute();

  if (isset($result['node'])) {
    $nids = array_keys($result['node']);
    $nodes = node_load_multiple($nids);

    foreach ($nodes as $node) {
      /*
       * We want to be sure that we're getting sections that aren't associated
       * with a group.
       */
      if (empty($node->field_oa_group_ref)) {
        $node->title = t($node->title . ' (Public)');
        node_save($node);
      }
    }
  }
}

/**
 * Implements hook_update_N().
 *
 * Limit Featured Products nodequeue to hold only 1 item.
 */
function iasc_configuration_update_7005() {
  $queue = nodequeue_load_queue_by_name('featured_products');
  if ($queue) {
    $queue->size = 1;
    nodequeue_save($queue);
  }
}

/**
 * Implements hook_update_N().
 *
 * Create IASC Body Categories Menu and menu items.
 */
function iasc_configuration_update_7006() {
  // Create the IASC Body Categories Menu.
  $menu = array(
    'menu_name' => 'menu-iasc-body-categories',
    'title' => t('IASC Body Categories'),
    'description' => t('The <em>IASC Body Categories</em> menu is used to manage the menu of Body categories for the site.'),
  );
  menu_save($menu);

  // Setup the menu items arrays that we'll use to save to the newly created menu.
  $menu_items_top = array();
  $menu_items_secondary = array();
  $mlid_parents = array();

  // Top level menu link titles.
  $menu_top = array_flip(array(
    'Principals',
    'Working Group',
    'Emergency Directors',
    'Subsidiary Bodies',
    'Events',
    'Field',
    )
  );

  // Secondary level menu link titles and parents.
  $secondary_items = array_fill_keys(array(
    'Accountability to Affected Populations/PSEA',
    'Humanitarian Financing',
    'Preparedness and Resilience',
    'Revitalizing Principled Humanitarian Action',
    'Protection Priority: Global Protection Cluster',
    'Gender and Humanitarian Action',
    'Meeting Humanitarian Challenges in Urban Areas',
    'Mental Health and Psychosocial Support in Emergency Settings',
    'IASC and the World Humanitarian Summit',
  ), 'Subsidiary Bodies');

  $secondary_items += array_fill_keys(array(
    'Geneva',
    'New York',
  ), 'Events');

  $secondary_items['Transformative Agenda'] = 'Field';

  // Menu links are a subset of the menu items in the main menu in a different order.
  $main_menu = menu_tree_all_data('main-menu');

  // Cycle thru main menu items to grab the info for the menu items we need.
  foreach($main_menu as $item) {
    // Handle the parent menu items first.
    if (isset($menu_top[$item['link']['link_title']])) {
      $title = $item['link']['link_title'];

      if ('Subsidiary Bodies' == $title || 'Events' == $title || 'Field' == $title) {
        $menu_items_top[] = array(
          'menu_name' => 'menu-iasc-body-categories',
          'link_path' => $item['link']['link_path'],
          'link_title' => $title,
          'weight' => $menu_top[$item['link']['link_title']],
        );
      }
      else {
        $menu_items_top[] = array(
          'menu_name' => 'menu-iasc-body-categories',
          'link_path' => drupal_get_normal_path(drupal_get_path_alias($item['link']['link_path']) . '/documents'),
          'link_title' => $title,
          'weight' => $menu_top[$item['link']['link_title']],
        );
      }
    }

    // See if we need to grab any of the secondary level menu items.
    foreach($item['below'] as $child) {
      if (isset($secondary_items[$child['link']['link_title']])) {
        $title = $child['link']['link_title'];
        $menu_items_secondary[$title] = array(
          'menu_name' => 'menu-iasc-body-categories',
          'link_path' => drupal_get_normal_path(drupal_get_path_alias($child['link']['link_path']) . '/documents'),
          'link_title' => $title,
        );
      }
    }
  }

  // First add the parent menu items to the IASC Body Categories Menu.
  foreach($menu_items_top as $item) {
    $mlid = menu_link_save($item);

    // We'll need the parent mlid when we add the secondard menu items.
    if ($mlid !== FALSE) {
      $mlid_parents[$item['link_title']] = $mlid;
    }
  }

  // Create the child menu items.
  $index = 0;
  foreach($secondary_items as $child_item_title => $parent_item_title) {
    // Get the parent mlid in menu-iasc-body-categories.
    if (isset($mlid_parents[$parent_item_title])) {
      // Add the remaining info on parent mlid and menu link weight.
      $menu_items_secondary[$child_item_title]['plid'] = $mlid_parents[$parent_item_title];
      $menu_items_secondary[$child_item_title]['weight'] = $index;

      if (menu_link_save($menu_items_secondary[$child_item_title]) !== FALSE) {
        $index++;
      }
    }
  }

  menu_cache_clear_all();
}