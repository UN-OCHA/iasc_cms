<?php
/**
 * @file
 * Code for the IASC Configuration module.
 */

include_once 'iasc_configuration.features.inc';

/**
 * Process the import of spaces and sections.
 *
 * @param array $options
 *   An associative array of options:
 *   - file      : the path to the csv file
 *   - delimiter : 1 character csv delimiter (default: ';')
 *   - enclosure : character that wraps the data (default: '"')
 *   - delete_all: delete all spaces and sections before import (default: FALSE)
 *
 * @return array
 *   Array of errors or nothing if import is successful.
 */
function iasc_configuration_import($options) {
  $messages = array();

  // Load the file object.
  if (empty($options['file'])) {
    $messages['file'] = t('Missing file.');
    return $messages;
  }

  $file_handle = fopen($options['file'], 'r');
  if ($file_handle === FALSE) {
    $messages['file'] = t('File could not be opened.');
    return $messages;
  }

  $items = array();
  if ($header = fgetcsv($file_handle, 0, $options['delimiter'], $options['enclosure'])) {
    while ($data = fgetcsv($file_handle, 0, $options['delimiter'], $options['enclosure'])) {
      if (is_array($data)) {
        $items[] = array_combine($header, $data);
      }
    }
  }

  if ($items === FALSE) {
    $messages['file'] = t('File had no data.');
    return $messages;
  }

  // Get parent bodies.
  $parent_bodies = iasc_configuration_default_parent_bodies();
  $subsidiary_ids = array();
  foreach ($parent_bodies as $key => $item) {
    if ('Subsidiary Bodies' == $item) {
      $subsidiary_ids[] = $key;
    }
  }

  $message = t("Importing parent bodies...\n");
  $operations[] = array("iasc_configuration_import_spaces",
    array(
      $parent_bodies,
      $message,
      array(),
      $subsidiary_ids,
      FALSE,
    ),
  );

  // Break up array of spaces/sections to import into chunks of 10.
  $chunk_size = 10;
  $chunks = array_chunk($items, $chunk_size);
  $count_chunks = count($chunks);

  $i = 0;
  // Import these spaces/sections in chunks.
  foreach ($chunks as $chunk) {
    $i++;

    $details = array(
      '@chunk' => $i,
      '@count' => $count_chunks,
    );

    $message = '';
    if (1 == $i) {
      if ($options['delete_all']) {
        $message .= t("Deleting all spaces and sections prior to importing.\n");
      }

      if ($options['delete_sections']) {
        $message .= t("Deleting all sections prior to importing.\n");
      }
      $details['@size'] = $chunk_size;
      $message .= t("Starting import: chunk @chunk of @count (@size records/chunk)\n", $details);
    }

    $message .= t('(Importing chunk @chunk of @count)', $details);

    $operations[] = array("iasc_configuration_import_spaces",
      array(
        $chunk,
        $message,
        $parent_bodies,
        $subsidiary_ids,
        $options['ignore_parents']
      ),
    );
  }

  // Put all that information into our batch array.
  $batch = array(
    'operations' => $operations,
    'title' => t('Importing lines from CSV file "%filename"...', array(
        '%filename'    => $options['file'],
      )
    ),
    'init_message' => t('Starting to import spaces and sections...'),
    'progress_message' => t('Processed @current out of @total.'),
    'error_message' => t('An error occurred during the import.'),
    'finished' => 'iasc_configuration_import_spaces_finished',
  );

  // Delete all spaces and sections if flag set.
  if ($options['delete_all']) {
    iasc_configuration_delete_all();
  }
  elseif ($options['delete_sections']) {
    // Delete only all sections if flag set.
    iasc_configuration_delete_all(TRUE);
  }

  // Set the batch.
  batch_set($batch);
}

/**
 * Updates or saves the new chunk of spaces/sections.
 *
 * @param array $chunk
 *   The current chunk of spaces/sections
 * @param string $message
 *   A helpful message about the status of the batch process.
 * @param array $parent_bodies
 *   An array mapping parent body names to legacy body ids.
 * @param bool $ignore_parents
 *   Whether or not we should ignore the parents in the file.
 * @param array $context
 *   The context for the batch process
 */
function iasc_configuration_import_spaces($chunk, $message, $parent_bodies, $subsidiary_ids, $ignore_parents, &$context) {
  $context['message'] = $message;

  foreach ($chunk as $key => $item) {
    if (empty($parent_bodies)) {
      // Parent bodies array does not have the same structure as subspaces csv.
      $item = array($item => $key);
    }

    iasc_configuration_create_node($item, $parent_bodies, $subsidiary_ids, $ignore_parents, $context);
  }
}

/**
 * Deletes all space and optionally all section nodes.
 *
 * @param bool $delete_sections_only
 *   TRUE if sections should only be deleted, otherwise FALSE.
 */
function iasc_configuration_delete_all($delete_sections_only = FALSE) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node');

  if ($delete_sections_only) {
    $query->entityCondition('bundle', array('oa_section'));
  }
  else {
    $query->entityCondition('bundle', array('oa_space', 'oa_section'));
  }

  $query->propertyOrderBy('nid', 'ASC');

  $result = $query->execute();
  if ($result['node']) {
    $nids = array_keys($result['node']);
    node_delete_multiple($nids);
  }
}

/**
 * Takes an array and creates a space or section node.
 *
 * @param array $item
 *   An array describing the space or section to create.
 * @param array $parent_bodies
 *   An array mapping parent body names to legacy body ids.
 * @param bool $ignore_parents
 *   Whether or not we should ignore the parents in the file.
 * @param array &$context
 *   A batch API context.
 *
 * @return object|NULL
 *   Returns the resulting node object if created; otherwise NULL.
 */
function iasc_configuration_create_node($item, $parent_bodies, $subsidiary_ids, $ignore_parents, &$context) {
  // Check the item array.
  if (!is_array($item)) {
    $context['results']['skipped'][] = "Node import failure: Unreadable node data";
    $message = t('Could not import item: @item', array('@item' => print_r($item, TRUE)));
    watchdog('iasc_configuration', $message, WATCHDOG_ERROR);
    return NULL;
  }

  $title = '';
  // If $parent_bodies is empty, we are importing a parent space.
  if (empty($parent_bodies)) {
    $title = key($item);
    $context['results']['processed'][] = $title;

    $nid = iasc_configuration_get_node_by_name('oa_space', $title, 0);
  }
  else {
    $context['results']['processed'][] = $item['bodyID'];

    // If body, bodydetail, and bodyshort equal NULL, then this is a parent space.
    $is_parent = 'NULL' == $item['body'] &&
      'NULL' == $item['bodydetail'] &&
      'NULL' == $item['bodyshort'];
    if ($is_parent) {
      $nid = iasc_configuration_get_parent_by_legacy_id($item['mainbodyID']);
    }
    else {
      // Get parent nid.
      // The parent might be $item['body'] or $item['mainbodyID'].
      // $item['body'] takes care of the fake bodies (pre-created).
      if (!empty($item['body']) && $item['body'] != 'NULL') {
        // Try to see if we have a space w/ a title that matches $item['body'].
        $legacy_parent = iasc_configuration_get_node_by_name('oa_space', trim($item['body']));
      }

      // If we don't have a space that matches $item['body'], then use $item['mainbodyID'].
      if (empty($legacy_parent)) {
        $legacy_parent = iasc_configuration_get_parent_by_legacy_id($item['mainbodyID']);
      }

      // If bodydetail != NULL, then that's the space name, otherwise use body.
      if (!empty($item['bodydetail']) && $item['bodydetail'] != 'NULL') {
        $title = $item['bodydetail'];
      }
      else {
        $title = trim($item['body']);
      }

      if ($ignore_parents) {
        $nid = iasc_configuration_get_node_by_name('oa_space', $title);
      }
      else {
        $nid = iasc_configuration_get_node_by_name('oa_space', $title, $legacy_parent);
      }

    }
  }

  if (empty($nid)) {
    $node = new stdClass();
    $node->title = $title;
    $node->uid = 1;
    $node->status = 1;
    $node->comment = 0;
    $node->promote = FALSE;
    $node->type = 'oa_space';
    $node->language = LANGUAGE_NONE;
  }
  else {
    $node = node_load($nid);
  }

  $time = time();
  // Get created date if available.
  if (!empty($item['bodycreated']) && $item['bodycreated'] != 'NULL') {
    $created = new DateTime($item['bodycreated']);
    $created = $created->getTimestamp();
  }

  // Set created time if this is new.
  if (empty($nid)) {
    $context['results']['new_space'][] = $node->title;
    if (!empty($created)) {
      $node->created = $created;
    }
    else {
      $node->created = $time;
    }
  }
  else {
    if (!empty($created)) {
      $node->created = $created;
    }

    $context['results']['updated_space'][] = $node->title;
  }

  $node->changed = $time;
  $node->path['pathauto'] = TRUE;
  $node->og_user_inheritance[LANGUAGE_NONE][0]['value'] = 1;
  $node->og_roles_permissions[LANGUAGE_NONE][0]['value'] = 0;
  $node->group_access[LANGUAGE_NONE][0]['value'] = 0;

  $space_term = taxonomy_get_term_by_name('Default', 'space_type');
  if ($space_term) {
    $space_term = current($space_term);
    $node->field_oa_space_type[LANGUAGE_NONE][0]['tid'] = $space_term->tid;
  }

  if (!empty($item['bodyshort']) && $item['bodyshort'] != 'NULL') {
    $node->field_short_name[LANGUAGE_NONE][0]['value'] = trim($item['bodyshort']);
  }

  $existing_ids = array();
  $legacy_items = field_get_items('node', $node, 'field_body_legacy_ids');

  if ($legacy_items) {
    foreach ($legacy_items as $id) {
      $existing_ids[] = $id['value'];
    }
  }

  // Store the legacy id of the parent body.
  if (empty($parent_bodies)) {
    $id = array_shift($item);
    if (!in_array($id, $existing_ids)) {
      $node->field_body_legacy_ids[LANGUAGE_NONE][] = array(
        'value' => $id,
      );
    }
  }

  // Store the legacy id of the body. There might be multiple ids.
  if (!empty($item['bodyID'])) {
    if (!in_array($item['mainbodyID'], $existing_ids)) {
      $node->field_legacy_parent_id[LANGUAGE_NONE][0] = array(
        'value' => trim($item['mainbodyID']),
      );
    }

    // Store the legacy name of the body.
    // format = mainbody + body + bodyshort.
    $legacy_name = $parent_bodies[$item['mainbodyID']];
    $legacy_name .= !empty($item['body']) && $item['body'] != 'NULL' ?
      " {$item['body']}" : '';

    if (!empty($item['bodyshort']) && $item['bodyshort'] != 'NULL') {
      $legacy_name .= " {$item['bodyshort']}";
    }
    else {
      $legacy_name .= !empty($item['bodydetail']) && $item['bodydetail'] != 'NULL' ?
        " {$item['bodydetail']}" : '';
    }

    $node->field_legacy_space_name[LANGUAGE_NONE][0] = array(
      'value' => trim($legacy_name),
    );
  }

  if (!empty($item['bodyclosed']) && $item['bodyclosed'] != 'NULL') {
    $closed = new DateTime($item['bodyclosed']);
    $node->field_date_closed[LANGUAGE_NONE][0] = array(
      'value' => $closed->format('Y-m-d H:i:s'),
      'timezone' => 'UTC',
      'timezone_db' => 'UTC',
    );
  }

  // Ignore $item['link'] - we will manually update since most won't be included.

  if (!empty($legacy_parent)) {
    $node->oa_parent_space[LANGUAGE_NONE][0]['target_id'] = $legacy_parent;
  }

  // Set Panelizer default.
  $node->field_oa_section_override[LANGUAGE_NONE][0]['value'] = 1;
  $handler = panelizer_entity_plugin_get_handler('node');

  if ('Subsidiary Bodies' == $title ||
    (!empty($item['mainbodyID']) && in_array($item['mainbodyID'], $subsidiary_ids))) {
    if (empty($node->panelizer)) {
      $panelizer = $handler->get_default_panelizer_object('oa_space', 'node:oa_space:subsidiary_bodies_default');
      $node->panelizer = $panelizer;
    }
    else {
      $node->panelizer['page_manager']->name = 'node:oa_space:subsidiary_bodies_default';
    }
  }
  elseif ('Principals' == $title || 'Working Group' == $title || 'Weekly' == $title) {
    if (empty($node->panelizer)) {
      $panelizer = $handler->get_default_panelizer_object('oa_space', 'node:oa_space:principals_wg_weekly_default');
      $node->panelizer = $panelizer;
    }
    else {
      $node->panelizer['page_manager']->name = 'node:oa_space:principals_wg_weekly_default';
    }
  }
  else {
    if (empty($node->panelizer)) {
      $panelizer = $handler->get_default_panelizer_object('oa_space', 'node:oa_space:default');
      $node->panelizer = $panelizer;
    }
    else {
      $node->panelizer['page_manager']->name = 'node:oa_space:default';
    }
  }

  node_save($node);

  // Add sections to the subspaces - ignore $parent_bodies.
  if (!empty($parent_bodies) && !empty($legacy_parent)) {
    iasc_configuration_update_sections($node->nid, $context);
  }
}

/**
 * Get the space entity by title.
 *
 * @param string $type
 *   The type of the node.
 * @param string $title
 *   The title of the node
 * @param int $space_nid
 *   Optional nid of the parent space
 *
 * @return int
 *   The nid of the node
 */
function iasc_configuration_get_node_by_name($type, $title, $space_nid = 0) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', $type)
    ->propertyCondition('title', $title)
    ->propertyOrderBy('nid', 'ASC')
    ->range(0, 1);

  if ($space_nid) {
    if ($type == 'oa_space') {
      $query->fieldCondition('oa_parent_space', 'target_id', $space_nid, '=');
    }
    else {
      $query->fieldCondition('og_group_ref', 'target_id', $space_nid, '=');
    }
  }

  $result = $query->execute();

  if (isset($result['node'])) {
    $nids = array_keys($result['node']);
    return $nids[0];
  }

  return FALSE;
}

/**
 * Get nid of parent based on the given legacy id.
 *
 * @param int $legacy_id
 *   The legacy id
 *
 * @return int
 *   The nid or FALSE if there's no nid.
 */
function iasc_configuration_get_parent_by_legacy_id($legacy_id) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'oa_space')
    ->fieldCondition('field_body_legacy_ids', 'value', $legacy_id, '=')
    ->propertyOrderBy('nid', 'ASC')
    ->range(0, 1);

  $result = $query->execute();

  if (isset($result['node'])) {
    $nids = array_keys($result['node']);
    return $nids[0];
  }

  return FALSE;
}

/**
 * Callback for when the batch process finishes.
 *
 * @param bool $success
 *   True if the batch process completed without errors.
 * @param array $results
 *   Information about the results set in iasc_configuration_import().
 * @param array $operations
 *   An array of details about the operations.
 */
function iasc_configuration_import_spaces_finished($success, $results, $operations) {
  if ($success) {
    drupal_set_message(count($results['processed']) . ' items processed.');
    $new_space = !empty($results['new_space']) ? count($results['new_space']) : 0;
    drupal_set_message($new_space . ' new spaces imported.');

    $updated_space = !empty($results['updated_space']) ? count($results['updated_space']) : 0;
    drupal_set_message($updated_space . ' spaces updated.');

    $new_section = !empty($results['new_section']) ? count($results['new_section']) : 0;
    drupal_set_message($new_section . ' new sections imported.');

    $updated_section = !empty($results['updated_section']) ? count($results['updated_section']) : 0;
    drupal_set_message($updated_section . ' sections updated.');

    $skipped = !empty($results['skipped']) ? count($results['skipped']) : 0;
    if ($skipped) {
      drupal_set_message($skipped . ' spaces/sections were not imported. See log for details.');
    }
  }
  else {
    // $operations contains the operations that remained unprocessed.
    $error_operation = reset($operations);
    $message = t('An error occurred while processing %error_operation with arguments: @arguments',
      array(
        '%error_operation' => $error_operation[0],
        '@arguments' => print_r($error_operation[1],
          TRUE),
      )
    );
    drupal_set_message($message, 'error');
  }
}

/**
 * Get default parent bodies.
 *
 * @return array
 *   An array of the parent bodies and their legacy ids.
 */
function iasc_configuration_default_parent_bodies() {
  // An array of Body Name => body legacy id.
  $init_bodies = array(
    'Working Group' => array(1),
    'Subsidiary Bodies' => array(2, 10, 11, 12, 15, 18, 19, 20, 21),
    'Principals' => array(3),
    'Other' => array(4, 14, 17),
    'Weekly' => array(6),
    'Reference Group' => array(13),
  );

  $parent_bodies = array();
  foreach ($init_bodies as $body_name => $ids) {
    foreach ($ids as $legacy_id) {
      $parent_bodies[$legacy_id] = $body_name;
    }
  }

  return $parent_bodies;
}

/**
 * Get sections nodes based on the parent nid.
 *
 * @param int $space_nid
 *   The parent space nid.
 *
 * @return array|bool
 *   The nid for the section or FALSE if one does not exist.
 */
function iasc_configuration_get_sections_by_parent($space_nid) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'oa_section')
    ->propertyOrderBy('nid', 'ASC')
    ->fieldCondition('og_group_ref', 'target_id', $space_nid, '=');

  $result = $query->execute();

  if (isset($result['node'])) {
    return array_keys($result['node']);
  }

  return FALSE;
}

/**
 * Adds default sections to a space.
 *
 * @param int $parent_nid
 *   The nid for the space.
 * @param array $context
 *   The context array for the batch operation.
 */
function iasc_configuration_update_sections($parent_nid, &$context) {
  // All subspaces have a Documents, Calendar and News Section.
  $section_types = array('Document Section', 'Calendar Section', 'News Section');
  $groups = iasc_configuration_get_groups();

  $section_type_terms = array();
  foreach ($section_types as $type) {
    $section_term = taxonomy_get_term_by_name($type, 'section_type');
    if ($section_term) {
      $section_term = current($section_term);

      $section_name = str_replace(array('Document', 'Calendar', ' Section'),
        array('Documents', 'Meetings', ''), $section_term->name);

      $section_type_terms[$section_name] = array(
        'tid' => $section_term->tid,
        'groups' => array(),
        'term_name' => $section_term->name,
      );
      // We need a section for each group.
      foreach ($groups as $group) {
        $name = $section_name;
        $name .= " ($group->title)";
        $section_type_terms[$name] = array(
          'tid' => $section_term->tid,
          'groups' => array($group),
          'term_name' => $section_term->name,
        );
      }
    }
  }

  $section_nids = iasc_configuration_get_sections_by_parent($parent_nid);

  $existing_sections = array();

  if ($section_nids) {
    $sections = node_load_multiple($section_nids);

    // Confirm that we have all of the sections:
    foreach ($sections as $section) {
      $existing_sections[$section->title] = $section;
    }
  }

  foreach ($section_type_terms as $section_name => $details) {
    // Update existing section.
    if (isset($existing_sections[$section_name])) {
      $details['node'] = $existing_sections[$section_name];
      iasc_configuration_add_section($parent_nid, $section_name, $details);
      $context['results']['update_section'][] = "$section_name - $parent_nid";
    }
    else {
      // Create new section.
      $details['node'] = FALSE;
      iasc_configuration_add_section($parent_nid, $section_name, $details);
      $context['results']['new_section'][] = "$section_name - $parent_nid";
    }
  }
}

/**
 * Get the OA Groups.
 *
 * @return array|bool
 *   Return an array of group nodes or FALSE if none found.
 */
function iasc_configuration_get_groups() {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'oa_group')
    ->propertyOrderBy('nid', 'ASC');
  $result = $query->execute();

  if (isset($result['node'])) {
    $nids = array_keys($result['node']);
    return node_load_multiple($nids);
  }

  return FALSE;
}

/**
 * Adds a section to a space.
 *
 * @param int $parent_nid
 *   The nid of the space.
 * @param string $name
 *   The name of the section to be added to the space.
 * @param array $details
 *   An array for the section: node, section_tid, groups, and section term name.
 */
function iasc_configuration_add_section($parent_nid, $name, $details) {
  if ($details['node']) {
    $node = $details['node'];
  }
  else {
    $node = new stdClass();
  }

  $node->title = $name;
  $node->uid = 1;
  $node->status = 1;
  $node->comment = 0;
  $node->promote = FALSE;
  $node->type = 'oa_section';
  $node->language = LANGUAGE_NONE;

  // Set the space for the section.
  $node->og_group_ref[LANGUAGE_NONE][0]['target_id'] = $parent_nid;

  // Set the section type.
  $node->field_oa_section[LANGUAGE_NONE][0]['tid'] = $details['tid'];

  // Set the panelizer default for the section.
  // The term name has to be in a similar format as machine names.
  $term_name = strtolower($details['term_name']);
  $term_name = str_replace(' ', '_', $term_name);

  if ($details['node']) {
    $node->panelizer['page_manager']->name = 'node:oa_section:' . $term_name;
  }
  else {
    /* This is not automatically tied to the section term on node creation.
    There is code in oa_core.module (_oa_core_setup_node_space_type()) that
    actually handles the setting of the panelizer layout based on the section
    selected on the form. Thus, we need to actually set the panelizer layout
    on node creation.
    */
    $handler = panelizer_entity_plugin_get_handler('node');
    $panelizer = $handler->get_default_panelizer_object(
      'oa_section',
      'node:oa_section:' . $term_name
    );
    $node->panelizer = $panelizer;
  }

  $time = time();
  $node->created = $time;
  $node->changed = $time;

  // Make sure we don't have duplicate group nids.
  $existing_groups = array();
  if ($details['node']) {
    $existing_groups = field_get_items('node', $node, 'field_oa_group_ref');
  }

  foreach ($details['groups'] as $group) {
    $exists = FALSE;
    foreach ($existing_groups as $eg) {
      if ($eg['target_id'] == $group->nid) {
        $exists = TRUE;
        break;
      }
    }

    if (!$exists) {
      $node->field_oa_group_ref[LANGUAGE_NONE][]['target_id'] = $group->nid;
      $existing_groups[] = array('target_id' => $group->nid);
    }

  }

  node_save($node);
}

/**
 * Implements hook_flag_access().
 */
function iasc_configuration_flag_access($flag, $content_id, $action, $account) {
  // Only Document nodes of type Product can use the Featured flag at this time.
  if ('featured' == $flag->name) {
    if (empty($content_id) || !($node = node_load($content_id))) {
      return FALSE;
    }

    if ('oa_wiki_page' == $node->type) {
      $wrapper = entity_metadata_wrapper('node', $node);
      $type = $wrapper->field_document_type->value();

      if ('Product' == $type->name) {
        return TRUE;
      }
    }

    return FALSE;
  }
}

/**
 * Implements hook_flag().
 *
 * Remove from featured, show on home, special nodequeues.
 */
function iasc_configuration_flag($action, $flag, $content_id, $account) {
  if ('featured' == $flag->name) {
    $node = node_load($content_id);

    // Determine the queue for Featured Document nodes.
    if ('oa_wiki_page' == $node->type) {
      $wrapper = entity_metadata_wrapper('node', $node);
      $type = $wrapper->field_document_type->value();

      // Currently we only have a nodequeue for Products.
      if ('Product' == $type->name) {
        $queue = nodequeue_load_queue_by_name('featured_products');

        if ($queue) {
          $subqueue = nodequeue_load_subqueue($queue->qid);
        }
      }
    }
  }
  elseif ('show_on_home' == $flag->name) {
    // Add to the Featured Homepage nodequeue.
    $queue = nodequeue_load_queue_by_name('featured_home');
    if ($queue) {
      $subqueue = nodequeue_load_subqueue($queue->qid);
    }
  }
  elseif ('special' == $flag->name) {
    // Add to the Special Announcements nodequeue.
    $queue = nodequeue_load_queue_by_name('special_announcements');
    if ($queue) {
      $subqueue = nodequeue_load_subqueue($queue->qid);
    }
  }

  if (!empty($subqueue) && 'flag' == $action) {
    nodequeue_subqueue_add($queue, $subqueue, $content_id);
  }
  elseif (!empty($subqueue) && 'unflag' == $action) {
    nodequeue_subqueue_remove_node($subqueue->qid, $content_id);
  }
}

/**
 * Implements hook_nodequeue_remove().
 */
function iasc_configuration_nodequeue_remove($sqid, $nid) {
  $subqueue = nodequeue_load_subqueue($sqid);
  switch ($subqueue->title) {
    case 'Featured Products':
      flag('unflag', 'featured', $nid);
      break;

    case 'Featured on Home':
      flag('unflag', 'show_on_home', $nid);
      break;

    case 'Special Announcements':
      flag('unflag', 'special', $nid);
      break;
  }
}

/**
 * Implements hook_nodequeue_add().
 */
function iasc_configuration_nodequeue_add($sqid, $nid) {
  $subqueue = nodequeue_load_subqueue($sqid);
  switch ($subqueue->title) {
    case 'Featured Products':
      flag('flag', 'featured', $nid);
      break;

    case 'Featured on Home':
      flag('flag', 'show_on_home', $nid);
      break;

    case 'Special Announcements':
      flag('flag', 'special', $nid);
      break;
  }
}

/**
 * Implements hook_query_alter().
 */
function iasc_configuration_query_alter(QueryAlterableInterface $query) {
  if ($query->hasTag('nodequeue_api_autocomplete')) {
    $queue = $query->getMetaData('queue');

    if ('featured_products' == $queue->name) {
      $term = taxonomy_get_term_by_name('Product', 'document_types');
      if ($term) {
        $term = current($term);
        $query->join('field_data_field_document_type', 't', 'n.nid = t.entity_id');
        $query->condition('t.field_document_type_tid', $term->tid, '=');
      }
    }
  }
}
