<?php
/**
 * @file
 * Code for the iasc meeting feature.
 */

include_once 'iasc_meeting.features.inc';

/**
 * Implements hook_ctools_plugin_directory().
 */
function iasc_meeting_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/content_types';
  }
}

/**
 * Implementation of hook_module_implements_alter()
 */
function iasc_meeting_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter') {
    $group = $implementations['iasc_meeting'];
    unset($implementations['iasc_meeting']);
    $implementations['iasc_meeting'] = $group;
  }
}

/**
 * Implements hook_field_formatter_info_alter().
 */
function iasc_meeting_field_formatter_info_alter(&$info) {
  // Use our version of field_formatter_view.
  $info['oa_events_date_formatter']['module'] = 'iasc_meeting';
}

/**
 * Implements hook_field_formatter_view().
 */
function iasc_meeting_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  // We need to add the year to the date formatter.
  // This doesn't seem to be easily alterable.
  if ($display['type'] == 'oa_events_date_formatter') {
    $event_info = oa_events_find_next_event($items);
    $item = $event_info['event'];
    // Create Date objects from item values.
    $start_date = new DateObject($item['value'], $item['timezone'], DATE_FORMAT_UNIX);
    $end_date = new DateObject($item['value2'], $item['timezone'], DATE_FORMAT_UNIX);

    // Create an array of month / day information for ease of use.
    $dates = array(
      'start' => array(
        'day' => date_format_date($start_date, 'custom', 'd'),
        'month' => date_format_date($start_date, 'custom', 'M'),
        'year' => date_format_date($start_date, 'custom', 'Y'),
      ),
      'end' => array(
        'day' => date_format_date($end_date, 'custom', 'd'),
        'month' => date_format_date($end_date, 'custom', 'M'),
        'year' => date_format_date($end_date, 'custom', 'Y'),
      ),
    );

    $day = $dates['start']['day'];
    $month = $dates['start']['month'];
    $year = $dates['start']['year'];

    $day_end = $dates['end']['day'];
    $month_end = $dates['end']['month'];
    $year_end = $dates['end']['year'];

    // Add year and use a different theme output.
    $element[0] = array(
      '#markup' => theme('iasc_meeting_date',
        array(
          'month' => $month,
          'day' => $day,
          'year' => $year,
          'month_end' => $month_end,
          'day_end' => $day_end,
          'year_end' => $year_end,
        )
      ),
    );
  }

  return $element;
}

/**
 * Implements hook_theme().
 */
function iasc_meeting_theme($existing, $type, $theme, $path) {
  $theme = array(
    'iasc_meeting_date' => array(
      'template' => 'iasc-meeting-date',
      'path' => drupal_get_path('module', 'iasc_meeting') . '/templates',
      'variables' => array(
        'month' => NULL,
        'day' => NULL,
        'year' => NULL,
      ),
    ),
    'meeting_login_cta' => array(
      'template' => 'meeting-login-cta',
      'path' => drupal_get_path('module', 'iasc_meeting') . '/templates',
      'variables' => array(
        'dest' => '',
      ),
    ),
  );

  return $theme;
}

/**
 * Implements hook_block_info().
 */
function iasc_meeting_block_info() {
  $blocks['meeting_login_cta'] = array(
    'info' => t('Meeting - Login CTA'),
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function iasc_meeting_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'meeting_login_cta':
      $block['subject'] = NULL;
      $dest = drupal_get_path_alias();
      $block['content'] = array(
        '#theme' => 'meeting_login_cta',
        '#dest' => drupal_get_path_alias(),
      );
      break;
  }
  return $block;
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function iasc_meeting_form_node_form_alter(&$form, &$form_state, $form_id) {
  $content_type = $form['#node']->type;
  if ('oa_event' == $content_type) {
    global $user;
    if (array_search('administrator', $user->roles) === FALSE) {
      $form['field_legacy_publish']['#access'] = FALSE;
    }

    // OA Radix (_form.scss), the description of the body is placed above the
    // field in an absolute position. The description for meetings is long and
    // the absolute position is too low. Add CSS to adjust for this.
    $form['#attached']['css'] = array(
      drupal_get_path('module', 'iasc_meeting') . '/css/iasc_meeting.css',
    );
  }
}

/**
 * Implements hook_form_alter().
 */
function iasc_meeting_form_alter(&$form, &$form_state, $form_id) {
  if ('views_exposed_form' == $form_id
    && 'oa_event_list' == $form_state['view']->name
    && 'page_calendar' == $form_state['view']->current_display) {

    // Ensure that target id is not set to Active Space.
    $form['og_group_ref_target_id']['#default_value'] = 'All';

    // Hide the undesired checkboxes for: "My Spaces", "Show subspace content",
    // "Show parent content".
    $form['og_group_ref_target_id_mine']['#access'] = FALSE;
    $form['og_subspaces_view_all']['#access'] = FALSE;
    $form['og_subspaces_view_parent']['#access'] = FALSE;
  }
}