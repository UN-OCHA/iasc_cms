<?php
/**
 * @file
 * Code for the iasc_contact feature.
 */

include_once 'iasc_contact.features.inc';

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function iasc_contact_form_node_form_alter(&$form, &$form_state, $form_id) {
  $content_type = $form['#node']->type;
  if ('contact' == $content_type) {
    // Make the node title the full name of the contact.
    $form['title']['#access'] = FALSE;
    $form['#submit'][] = 'iasc_contact_form_submit';

    // Change the labels for Building and Room. These are part of addressfield.
    $form['field_address'][LANGUAGE_NONE][0]['name_block']['name_line']['#title'] = t('Building');
    $form['field_address'][LANGUAGE_NONE][0]['organisation_block']['organisation_name']['#title'] = t('Room');
    $form['field_org_address'][LANGUAGE_NONE][0]['name_block']['name_line']['#title'] = t('Building');

    $node = $form['#node'];
    if (isset($node->field_address[LANGUAGE_NONE][0]['name_line'])) {
      $form['field_address'][LANGUAGE_NONE][0]['#address']['name_line'] = $node->field_address[LANGUAGE_NONE][0]['name_line'];
    }
    if (isset($node->field_address[LANGUAGE_NONE][0]['organisation_name'])) {
      $form['field_address'][LANGUAGE_NONE][0]['#address']['organisation_name'] = $node->field_address[LANGUAGE_NONE][0]['organisation_name'];
    }
  }
}

/**
 * Submit function for the contact node edit form.
 *
 * @param array $form
 *   The form array
 * @param array $form_state
 *   The form state array.
 */
function iasc_contact_form_submit($form, &$form_state) {
  $title = '';

  // Add the title to the full name if set.
  $title_option = $form_state['input']['field_title'][LANGUAGE_NONE];
  if ($title_option != '_none') {
    $title .= $form['field_title'][LANGUAGE_NONE]['#options'][$title_option] . ' ';
  }

  $title .= $form_state['input']['field_first_name'][LANGUAGE_NONE][0]['value'] .
    ' ' . $form_state['input']['field_last_name'][LANGUAGE_NONE][0]['value'];

  // Ensure the generated title isn't too long.
  $title = substr($title, 0, 255);
  $form_state['values']['title'] = $title;
}

/**
 * Implements hook_node_access().
 */
function iasc_contact_node_access($node, $op, $account) {
  $type = is_string($node) ? $node : $node->type;

  if ('contact' == $type && $op == 'view') {
    // Deny access to node view for all roles outside of administrator.
    if (array_search('administrator', $account->roles) === FALSE) {
      return NODE_ACCESS_DENY;
    }
  }

  return NODE_ACCESS_IGNORE;
}

/**
 * Process the import of contacts.
 *
 * @param array $options
 *   An associative array of options:
 *   - file      : the path to the csv file
 *   - delimiter : 1 character csv delimiter (default: ';')
 *   - enclosure : character that wraps the data (default: '"')
 *   - delete_all: delete all spaces and sections before import (default: FALSE)
 *
 * @return array
 *   Array of errors or nothing if import is successful.
 */
function iasc_contact_import($options) {
  $messages = array();

  // Load the file object.
  $file_handle = iasc_contact_check_file($options['file'], $messages);

  if (!empty($messages)) {
    return $messages;
  }

  $operations = array();
  iasc_contact_contact_batch_ops($file_handle, $options, $messages, $operations);
  if (!empty($messages)) {
    return $messages;
  }

  // Set finished function based on type being processed.
  switch ($options['type']) {
    case 'contacts':
      $finished = 'iasc_contact_import_contacts_finished';
      break;

    case 'orgs':
      $finished = 'iasc_contact_import_orgs_finished';
      break;

    case 'bodies':
      $finished = 'iasc_contact_import_bodies_finished';
      break;

    case 'addresses':
      $finished = 'iasc_contact_import_addresses_finished';
      break;
  }

  // Put all that information into our batch array.
  $batch = array(
    'operations' => $operations,
    'title' => t('Importing !total_lines lines from CSV file "%filename"...', array(
        '%filename'    => $options['file'],
      )
    ),
    'init_message' => t('Starting to import contacts...'),
    'progress_message' => t('Processed @current out of @total.'),
    'error_message' => t('An error occurred during the import.'),
    'finished' => $finished,
  );

  // Delete all contacts if flag set.
  if (!empty($options['delete_all'])) {
    iasc_contact_delete_all();
  }

  // Delete all body memberships if flag set.
  if (!empty($options['clear_memberships'])) {
    iasc_contact_clear_memberships();
  }

  // Set the batch.
  batch_set($batch);
}

/**
 * Checks to make sure we can read the file.
 *
 * @param string $file
 *   The file to check.
 * @param array $messages
 *   An array of messages.
 *
 * @return mixed
 *   The file handle.
 */
function iasc_contact_check_file($file, &$messages) {
  if (empty($file)) {
    $messages['file'] = t("Missing file");
  }

  $file_handle = fopen($file, 'r');
  if ($file_handle === FALSE) {
    $messages['file'] = t("File: %file could not be opened.", array('%file' => $file));
  }

  return $file_handle;
}

/**
 * Sets up the process contact batch operations.
 *
 * @param mixed $file_handle
 *   The file pointer resource.
 * @param array $options
 *   Options for reading the file.
 * @param array $messages
 *   Error message array.
 * @param array $operations
 *   An array of batch operations.
 */
function iasc_contact_contact_batch_ops($file_handle, $options, &$messages, &$operations) {
  $contact_items = array();
  if ($header = fgetcsv($file_handle, 0, $options['delimiter'], $options['enclosure'])) {
    while ($data = fgetcsv($file_handle, 0, $options['delimiter'], $options['enclosure'])) {
      if (is_array($data)) {
        $contact_items[] = array_combine($header, $data);
      }
    }
  }

  if ($contact_items === FALSE) {
    $messages['file'] = t('File had no data.');
    return $messages;
  }

  // Break up array of contacts to import into chunks of 10.
  $chunk_size = 10;
  $chunks = array_chunk($contact_items, $chunk_size);

  $count_chunks = count($chunks);

  $i = 0;
  // Import these contacts in chunks.
  foreach ($chunks as $chunk) {
    $i++;

    $details = array(
      '@chunk' => $i,
      '@count' => $count_chunks,
    );

    switch ($options['type']) {
      case 'contacts':
        $operation = 'iasc_contact_import_contacts';
        break;

      case 'orgs':
        $operation = 'iasc_contact_update_orgs';
        break;

      case 'bodies':
        $operation = 'iasc_contact_update_bodies';
        break;

      case 'addresses':
        $operation = 'iasc_contact_update_addresses';
        break;
    }

    $message = '';
    if (1 == $i) {
      $details['@size'] = $chunk_size;
      $message .= t("Starting import of contacts: chunk @chunk of @count (@size records/chunk)\n", $details);
    }

    $message .= t('(Importing chunk @chunk of @count)', $details);

    $operations[] = array($operation,
      array(
        $chunk,
        $message,
      ),
    );
  }
}

/**
 * Deletes all existing contact nodes.
 */
function iasc_contact_delete_all() {
  // Delete all contact nodes.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'contact');

  $result = $query->execute();
  if (!empty($result['node'])) {
    $nids = array_keys($result['node']);
    node_delete_multiple($nids);
  }
}

/**
 * Deletes all existing body memberships in contact nodes.
 *
 * This clears out all of the membership fields in the field collection entities.
 */
function iasc_contact_clear_memberships() {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'field_collection_item')
    ->entityCondition('bundle', 'field_membership');
  $result = $query->execute();

  if (!empty($result['field_collection_item'])) {
    $ids = array_keys($result['field_collection_item']);
    foreach (field_collection_item_load_multiple($ids) as $un_item) {
      $un_item->deleteRevision(TRUE);
    }
  }
}

/**
 * Updates or saves the new chunk of contacts.
 *
 * @param array $chunk
 *   The current chunk of contacts
 * @param string $message
 *   A helpful message about the status of the batch process.
 * @param array $context
 *   The context for the batch process
 */
function iasc_contact_import_contacts($chunk, $message, &$context) {
  $context['message'] = $message;

  foreach ($chunk as $item) {
    iasc_contact_create_node($item, $context);
  }
}

/**
 * Updates or saves the new chunk of body memberships for contacts.
 *
 * @param array $chunk
 *   The current chunk of body membership data
 * @param string $message
 *   A helpful message about the status of the batch process.
 * @param array $context
 *   The context for the batch process
 */
function iasc_contact_update_bodies($chunk, $message, &$context) {
  $context['message'] = $message;

  foreach ($chunk as $item) {
    iasc_contact_link_bodies($item, $context);
  }
}

/**
 * Updates or saves the new chunk of org memberships for contacts.
 *
 * @param array $chunk
 *   The current chunk of org membership data
 * @param string $message
 *   A helpful message about the status of the batch process.
 * @param array $context
 *   The context for the batch process
 */
function iasc_contact_update_orgs($chunk, $message, &$context) {
  $context['message'] = $message;

  foreach ($chunk as $item) {
    iasc_contact_link_org($item, $context);
  }
}

/**
 * Updates or saves the new chunk of org addresses for contacts.
 *
 * @param array $chunk
 *   The current chunk of org address data
 * @param string $message
 *   A helpful message about the status of the batch process.
 * @param array $context
 *   The context for the batch process
 */
function iasc_contact_update_addresses($chunk, $message, &$context) {
  $context['message'] = $message;

  foreach ($chunk as $item) {
    iasc_contact_link_address($item, $context);
  }
}

/**
 * Takes an array and creates a contact node.
 *
 * @param array $item
 *   An array describing the contact to create.
 * @param array &$context
 *   A batch API context.
 */
function iasc_contact_create_node($item, &$context) {
  // Check the item array.
  if (!is_array($item)) {
    $context['results']['contact_skipped'][] = "Node import failure: Unreadable node data";
    $message = t('Could not import item');
    watchdog('iasc_contact', $message, WATCHDOG_ERROR);
    return;
  }

  foreach ($item as $key => $value) {
    $item[$key] = trim($value);
  }

  $legacy_id = $item['contactID'];
  $context['results']['contact_processed'][] = $legacy_id;

  // Get field_legacy_id
  $nid = iasc_contact_get_nid_by_legacyid($legacy_id);

  if (empty($nid)) {
    $defaults = array(
      'type' => 'contact',
      'uid' => 1,
      'status' => 1,
      'comment' => 0,
      'promote' => 0,
      'language' => LANGUAGE_NONE,
    );

    $entity = entity_create('node', $defaults);
    $node_wrapper = entity_metadata_wrapper('node', $entity);
  }
  else {
    $node_wrapper = entity_metadata_wrapper('node', $nid);
    $entity = $node_wrapper->value();
  }

  // Set created time if this is new.
  if (empty($nid)) {
    $context['results']['new_contact'][] = $legacy_id;
  }
  else {
    $context['results']['updated_contact'][] = $legacy_id;
  }

  // field_title is a select list: 0 => Ms. 1 => Mr., etc.
  if (!empty($item['title'])) {
    $titles = title_mappings();
    if (isset($titles[$item['title']])) {
      $node_wrapper->field_title = $titles[$item['title']];
      $item['title'] .= ' ';
    }
    else {
      $item['title'] = '';
    }
  }
  else {
    $item['title'] = '';
  }

  // Keep first + last name as is (even if NULL) in case accts are referenced.
  $node_wrapper->field_first_name = $item['first'];

  $node_wrapper->field_last_name = $item['last'];

  $name = $item['title'] . $item['first'] . ' ' . $item['last'];

  // We are not going to import contacts missing first and last names.
  if (empty($name)) {
    $context['results']['contact_skipped'][] = "Node import failure: Unreadable node data";
    $message = t('Could not import item: @item', array('@item' => $item['contactID']));
    watchdog('iasc_contact', $message, WATCHDOG_ERROR);
    return NULL;
  }

  $node_wrapper->title = $title = substr($name, 0, 255);

  $node_wrapper->field_position = (!empty($item['position']) && $item['position'] != 'NULL') ? $item['position'] : '';
  $node_wrapper->field_department = (!empty($item['department']) && $item['department'] != 'NULL') ? $item['department'] : '';
  $node_wrapper->field_branch = (!empty($item['branch']) && $item['branch'] != 'NULL') ? $item['branch'] : '';
  if (!empty($item['description']) && $item['description'] != 'NULL') {
    $node_wrapper->body->set(array('value' => $item['description']));
  }

  $node_wrapper->field_phone[0] = (!empty($item['phone']) && $item['phone'] != 'NULL') ? $item['phone'] : '';
  if (!empty($item['phone2']) && $item['phone2'] != 'NULL') {
    if (!empty($item['phone'])) {
      $node_wrapper->field_phone[1] = $item['phone2'];
    }
    else {
      $node_wrapper->field_phone[0] = $item['phone2'];
    }
  }

  // Mobile field is multi-value.
  $node_wrapper->field_mobile[0] = (!empty($item['mobile']) && $item['mobile'] != 'NULL') ? $item['mobile'] : '';
  if (!empty($item['mobile2']) && $item['mobile2'] != 'NULL') {
    if (!empty($item['mobile'])) {
      $node_wrapper->field_mobile[1] = $item['mobile2'];
    }
    else {
      $node_wrapper->field_mobile[0] = $item['mobile2'];
    }
  }

  $node_wrapper->field_fax = (!empty($item['fax']) && $item['fax'] != 'NULL') ? $item['fax'] : '';

  // Email field is multi-value.
  $node_wrapper->field_email[0] = (!empty($item['email']) && $item['email'] != 'NULL') ? $item['email'] : '';
  if (!empty($item['email2']) && $item['email2'] != 'NULL') {
    $node_wrapper->field_email[1] = $item['email2'];
  }

  if (!empty($item['link']) && $item['link'] != 'NULL') {
    $node_wrapper->field_homepage->set(array('url' => $item['link'], 'title' => ''));
  }

  $address = $node_wrapper->field_address->value();

  // We are using the name_line field of addressfield for Building.
  $address['name_line'] = (!empty($item['building']) && $item['building'] != 'NULL') ? $item['building'] : '';

  // We are using the organisation_name field of addressfield for Room.
  $address['organisation_name'] = (!empty($item['officeroom']) && $item['officeroom'] != 'NULL') ? $item['officeroom'] : '';

  $address['thoroughfare'] = (!empty($item['street']) && $item['street'] != 'NULL') ? $item['street'] : '';
  $address['administrative_area'] = (!empty($item['stateprovince']) && $item['stateprovince'] != 'NULL') ? $item['stateprovince'] : '';
  $address['locality'] = (!empty($item['city']) && $item['city'] != 'NULL') ? $item['city'] : '';
  $address['postal_code'] = (!empty($item['postalcode']) && $item['postalcode'] != 'NULL') ? $item['postalcode'] : '';
  $address['premise'] = (!empty($item['postalcode2']) && $item['postalcode2'] != 'NULL') ? $item['postalcode2'] : '';

  // Standardize the country.
  if (!empty($item['country']) && $item['country'] != 'NULL') {
    $country_mappings = legacy_country_mappings();
    $address['country'] = $country_mappings[$item['country']];
  }
  else {
    // Set the default country to Switzerland for empty addresses.
    // Country determines the default set of address fields displayed in the form.
    $address['country'] = 'CH';
  }

  $node_wrapper->field_address->set($address);

  $node_wrapper->field_legacy_id = $legacy_id;

  $message = t("Saved Contact: @contact", array('@contact' => $node_wrapper->title->value()));
  watchdog('iasc_contact', $message, WATCHDOG_DEBUG);
  $node_wrapper->save(TRUE);
  entity_save('node', $entity);
}

/**
 * Takes an array and updates a contact node with body membership data.
 *
 * @param array $item
 *   An array describing the contact/body membership relationship.
 * @param array &$context
 *   A batch API context.
 */
function iasc_contact_link_bodies($item, &$context) {
  // Check the item array.
  if (!is_array($item)) {
    $context['results']['body_skipped'][] = "Node import failure: Unreadable node data";
    $message = t('Could not import item: @item', array('@item' => print_r($item, TRUE)));
    watchdog('iasc_contact', $message, WATCHDOG_ERROR);
    return;
  }

  $legacy_id = $item['contactID'];
  $context['results']['body_processed'][] = $legacy_id;

  $nid = iasc_contact_get_nid_by_legacyid($legacy_id);

  // We should have a contact node at this point.
  if (empty($nid)) {
    $context['results']['body_skipped'][] = "Node import failure: Unreadable node data";
    $message = t('Could not import item: @item', array('@item' => print_r($item, TRUE)));
    watchdog('iasc_contact', $message, WATCHDOG_ERROR);
    return;
  }

  $node_wrapper = entity_metadata_wrapper('node', $nid);
  $entity = $node_wrapper->value();

  // Body Membership is a field collection.
  $body_nid = iasc_contact_get_nid_by_legacy_name(trim($item['body_detailed_short_concatenated']));
  if ($body_nid) {
    $position = !empty($item['bodyposition']) && $item['bodyposition'] != 'NULL' ? trim($item['bodyposition']) : '';
    $category = !empty($item['category']) && $item['category'] != 'NULL' ? trim($item['category']) : '';

    $add_another = FALSE;

    if (empty($memberships)) {
      // This is the first item in the multivalued field collection.
      $add_another = TRUE;
    }
    else {
      // We need to check if this entry already exists or if it's new.
      foreach ($memberships as $info) {
        print "has fc entities\n";
        $membership_wrapper = entity_metadata_wrapper('field_collection_item', $info);
        $full_match = ($body_nid == $membership_wrapper->field_body_membership->value()->nid);
        $full_match = ($position == $membership_wrapper->field_position->value());
        $full_match = ($category == $membership_wrapper->field_body_membership->value()->nid);

        if (!$full_match) {
          $add_another = TRUE;
        }
      }
    }

    if ($add_another) {
      $collection = entity_create('field_collection_item', array('field_name' => 'field_membership'));
      $collection->setHostEntity('node', $entity);
      $membership_wrapper = entity_metadata_wrapper('field_collection_item', $collection);
      $membership_wrapper->field_body_membership = $body_nid;
      $membership_wrapper->field_position = $position;
      $membership_wrapper->field_contact_category = $category;
      $membership_wrapper->save();
    }
  }
  else {
    $context['results']['body_skipped'][] = "Could not import authoring body - no match for {$item['body_detailed_short_concatenated']}";
    $message = t('Could not import authoring body - no match for @item', array('@item' => $item['body_detailed_short_concatenated']));
    watchdog('iasc_contact', $message, WATCHDOG_ERROR);
    return;
  }

  // Save the entity.
  $node_wrapper->save(TRUE);
  entity_save('node', $entity);

  $context['results']['updated_body_contact'][] = $legacy_id;
}

/**
 * Returns the space nid associated with the legacy name or FALSE if none exists.
 *
 * @param string $name
 *   The legacy name
 *
 * @return int
 *   The nid of the node
 */
function iasc_contact_get_nid_by_legacy_name($name) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'oa_space')
    ->fieldCondition('field_legacy_space_name', 'value', $name, '=')
    ->propertyOrderBy('nid', 'ASC')
    ->range(0, 1);

  $result = $query->execute();

  if (isset($result['node'])) {
    $nids = array_keys($result['node']);
    return $nids[0];
  }

  return FALSE;
}

/**
 * Takes an array and updates a contact node with organisation reference.
 *
 * @param array $item
 *   An array describing the contact/organisation relationship.
 * @param array &$context
 *   A batch API context.
 */
function iasc_contact_link_org($item, &$context) {
  // Check the item array.
  if (!is_array($item)) {
    $context['results']['org_skipped'][] = "Node import failure: Unreadable node data";
    $message = t('Could not import item');
    watchdog('iasc_contact', $message, WATCHDOG_ERROR);
    return NULL;
  }

  $legacy_id = $item['contactID'];
  $context['results']['org_processed'][] = $legacy_id;

  $nid = iasc_contact_get_nid_by_legacyid($legacy_id);
  // We should have a contact node at this point.
  if (empty($nid)) {
    $context['results']['org_skipped'][] = "Node import failure: Unreadable node data";
    $message = t('Could not import item: @item', array('@item' => $item['contactID']));
    watchdog('iasc_contact', $message, WATCHDOG_ERROR);
    return;
  }

  $node_wrapper = entity_metadata_wrapper('node', $nid);
  $entity = $node_wrapper->value();

  // Get tid from organisation name: $item['organization'].
  $org_term = taxonomy_get_term_by_name($item['organization'], 'hosts');
  if ($org_term) {
    $org_term = current($org_term);
    $node_wrapper->field_organisation = $org_term->tid;

    // Save the entity.
    $node_wrapper->save(TRUE);
    entity_save('node', $entity);

    $message = t("Update Contact: @contact with org: @org", array(
      '@contact' => $node_wrapper->title->value(),
      '@org' => $item['organization'],
    ));
    watchdog('iasc_contact', $message, WATCHDOG_DEBUG);

    $context['results']['updated_org_contact'][] = $legacy_id;
  }
}

/**
 * Takes an array and updates a contact node with organisation address.
 *
 * @param array $item
 *   An array describing the contact/organisation relationship and address.
 * @param array &$context
 *   A batch API context.
 */
function iasc_contact_link_address($item, &$context) {
  // Check the item array.
  if (!is_array($item)) {
    $context['results']['address_skipped'][] = "Node import failure: Unreadable node data";
    $message = t('Could not import item');
    watchdog('iasc_contact', $message, WATCHDOG_ERROR);
    return NULL;
  }

  $legacy_id = $item['contactID'];
  $context['results']['address_processed'][] = $legacy_id;

  $nid = iasc_contact_get_nid_by_legacyid($legacy_id);
  // We should have a contact node at this point.
  if (empty($nid)) {
    $context['results']['address_skipped'][] = "Node import failure: Unreadable node data";
    $message = t('Could not import item: @item', array('@item' => $item['contactID']));
    watchdog('iasc_contact', $message, WATCHDOG_ERROR);
    return;
  }

  $node_wrapper = entity_metadata_wrapper('node', $nid);
  $entity = $node_wrapper->value();

  $address = $node_wrapper->field_org_address->value();

  // We are using the name_line field of addressfield for orgbuilding.
  $address['name_line'] = (!empty($item['orgbuilding']) && $item['orgbuilding'] != 'NULL') ? $item['orgbuilding'] : '';

  $address['thoroughfare'] = (!empty($item['orgstreet']) && $item['orgstreet'] != 'NULL') ? $item['orgstreet'] : '';
  $address['administrative_area'] = (!empty($item['orgstateprovince']) && $item['orgstateprovince'] != 'NULL') ? $item['orgstateprovince'] : '';
  $address['locality'] = (!empty($item['orgcity']) && $item['orgcity'] != 'NULL') ? $item['orgcity'] : '';
  $address['postal_code'] = (!empty($item['orgpostcode']) && $item['orgpostcode'] != 'NULL') ? $item['orgpostcode'] : '';
  $address['premise'] = (!empty($item['orgpostcode2']) && $item['orgpostcode2'] != 'NULL') ? $item['orgpostcode2'] : '';

  // Standardize the country.
  if (!empty($item['orgcountry']) && $item['orgcountry'] != 'NULL') {
    $country_mappings = legacy_country_mappings();
    $address['country'] = $country_mappings[$item['orgcountry']];
  }
  else {
    // Set the default country to Switzerland for empty addresses.
    // Country determines the default set of address fields displayed in the form.
    $address['country'] = 'CH';
  }

  $node_wrapper->field_org_address->set($address);

  $node_wrapper->field_org_phone = (!empty($item['orgphone']) && $item['orgphone'] != 'NULL') ? $item['orgphone'] : '';
  $node_wrapper->field_org_fax = (!empty($item['orgfax']) && $item['orgfax'] != 'NULL') ? $item['orgfax'] : '';

  // Save the entity.
  $node_wrapper->save(TRUE);
  entity_save('node', $entity);

  $message = t("Update Contact: @contact with org address for: @org", array(
    '@contact' => $node_wrapper->title->value(),
    '@org' => $item['orgName'],
  ));
  watchdog('iasc_contact', $message, WATCHDOG_DEBUG);

  $context['results']['updated_org_address'][] = $legacy_id;
}


/**
 * Get the default mappings for titles.
 *
 * @return array
 *   An array with the default value => key mappings for titles.
 */
function title_mappings() {
  static $titles;
  if (isset($titles)) {
    return $titles;
  }

  $titles = array(
    'Ms.' => 0,
    'Mr.' => 1,
    'Mrs.' => 2,
    'Dr.' => 3,
    'Prof.' => 4,
    'Sir.' => 5,
    'Fr.' => 6,
  );

  return $titles;
}

/**
 * Get the mapping for legacy countries to 2-letter country codes.
 *
 * @return array
 *   An array of the legacy country mappings to 2-letter country codes.
 */
function legacy_country_mappings() {
  // The final mappings are coming from country_get_list() in locale.inc.
  static $legacy_country_mappings;
  if (isset($legacy_country_mappings)) {
    return $legacy_country_mappings;
  }

  $legacy_country_mappings = array(
    "Afghanistan" => 'AF',
    "Angola" => 'AO',
    "Belgium" => 'BE',
    "Burundi" => 'BI',
    "Central African Republic" => 'CF',
    "Chad" => 'TD',
    "Cote d'Ivoire" => 'CI',
    "Democratic Republic of Congo" => 'CD',
    "Democratic Republic of Congo (DRC)" => 'CD',
    "Ethiopia" => 'ET',
    "France" => 'FR',
    "Germany" => 'DE',
    "Ghana" => 'GH',
    "Indonesia" => 'ID',
    "Ireland" => 'IE',
    "Israel" => 'IL',
    "Italy" => 'IT',
    "Kenya" => 'KE',
    "Norway" => 'NO',
    "Pakistan" => 'PK',
    "Panama" => 'PA',
    "Peru" => 'PE',
    "Philippines" => 'PH',
    "Saudi Arabia" => 'SA',
    "Senegal" => 'SN',
    "Somalia" => 'SO',
    "Sri Lanka" => 'LK',
    "Sudan" => 'SD',
    "Sweden" => 'SE',
    "Suisse" => 'CH',
    "Switzerland" => 'CH',
    "Trinidad and Tobago" => 'TT',
    "Uganda" => 'UG',
    "UK" => 'GB',
    "United Kingdom" => 'GB',
    "United States" => 'US',
    "United States of America" => 'US',
    "USA" => 'US',
    "Zimbabwe" => 'ZW',
  );

  return $legacy_country_mappings;
}

/**
 * Returns the nid associated with the legacy id or FALSE if no node exists.
 *
 * @param int $id
 *   The legacy id
 *
 * @return int
 *   The nid of the node
 */
function iasc_contact_get_nid_by_legacyid($id) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'contact')
    ->fieldCondition('field_legacy_id', 'value', $id, '=')
    ->propertyOrderBy('nid', 'ASC')
    ->range(0, 1);

  $result = $query->execute();

  if (isset($result['node'])) {
    $nids = array_keys($result['node']);
    return $nids[0];
  }

  return FALSE;
}

/**
 * Callback for when the batch process finishes.
 *
 * @param bool $success
 *   True if the batch process completed without errors.
 * @param array $results
 *   Information about the results set in iasc_taxonomy_import_contacts().
 * @param array $operations
 *   An array of details about the operations.
 */
function iasc_contact_import_contacts_finished($success, $results, $operations) {
  if ($success) {
    $results['contact_processed'] = !empty($results['contact_processed']) ? $results['contact_processed'] : array();
    drupal_set_message(count($results['contact_processed']) . ' items processed.');

    $results['new_contact'] = !empty($results['new_contact']) ? $results['new_contact'] : array();
    drupal_set_message(count($results['new_contact']) . ' new contacts imported.');

    $results['updated_contact'] = !empty($results['updated_contact']) ? $results['updated_contact'] : array();
    drupal_set_message(count($results['updated_contact']) . ' contacts updated.');

    if (!empty($results['contact_skipped'])) {
      drupal_set_message(count($results['contact_skipped']) . ' contacts were not imported. See log for details.');
    }
  }
  else {
    // $operations contains the operations that remained unprocessed.
    $error_operation = reset($operations);
    $message = t('An error occurred while processing %error_operation with arguments: @arguments',
      array(
        '%error_operation' => $error_operation[0],
        '@arguments' => print_r($error_operation[1],
          TRUE),
      )
    );
    drupal_set_message($message, 'error');
  }
}

/**
 * Callback for when the batch process finishes.
 *
 * @param bool $success
 *   True if the batch process completed without errors.
 * @param array $results
 *   Information about the results set in iasc_contact_update_orgs().
 * @param array $operations
 *   An array of details about the operations.
 */
function iasc_contact_import_orgs_finished($success, $results, $operations) {
  if ($success) {
    drupal_set_message(count($results['org_processed']) . ' items processed.');

    $results['updated_org_contact'] = !empty($results['updated_org_contact']) ? $results['updated_org_contact'] : array();
    drupal_set_message(count($results['updated_org_contact']) . ' contacts updated with organisation memberships.');

    if (!empty($results['org_skipped'])) {
      drupal_set_message(count($results['org_skipped']) . ' org memberships were not imported. See log for details.');
    }
  }
  else {
    // $operations contains the operations that remained unprocessed.
    $error_operation = reset($operations);
    $message = t('An error occurred while processing %error_operation with arguments: @arguments',
      array(
        '%error_operation' => $error_operation[0],
        '@arguments' => print_r($error_operation[1],
          TRUE),
      )
    );
    drupal_set_message($message, 'error');
  }
}

/**
 * Callback for when the batch process finishes.
 *
 * @param bool $success
 *   True if the batch process completed without errors.
 * @param array $results
 *   Information about the results set in iasc_contact_update_bodies().
 * @param array $operations
 *   An array of details about the operations.
 */
function iasc_contact_import_bodies_finished($success, $results, $operations) {
  if ($success) {
    drupal_set_message(count($results['body_processed']) . ' items processed.');
    $results['updated_body_contact'] = !empty($results['updated_body_contact']) ? $results['updated_body_contact'] : array();
    drupal_set_message(count($results['updated_body_contact']) . ' contacts updated with body memberships.');

    if (count($results['body_skipped'])) {
      drupal_set_message(count($results['body_skipped']) . ' body memberships were not imported. See log for details.');
    }
  }
  else {
    // $operations contains the operations that remained unprocessed.
    $error_operation = reset($operations);
    $message = t('An error occurred while processing %error_operation with arguments: @arguments',
      array(
        '%error_operation' => $error_operation[0],
        '@arguments' => print_r($error_operation[1],
          TRUE),
      )
    );
    drupal_set_message($message, 'error');
  }
}

/**
 * Callback for when the batch process finishes.
 *
 * @param bool $success
 *   True if the batch process completed without errors.
 * @param array $results
 *   Information about the results set in iasc_contact_update_addresses().
 * @param array $operations
 *   An array of details about the operations.
 */
function iasc_contact_import_addresses_finished($success, $results, $operations) {
  if ($success) {
    drupal_set_message(count($results['address_processed']) . ' items processed.');

    $results['updated_address_contact'] = !empty($results['updated_address_contact']) ?
      $results['updated_address_contact'] : array();
    drupal_set_message(count($results['updated_address_contact']) .
      ' contacts updated with organization address.');

    if (!empty($results['address_skipped'])) {
      drupal_set_message(count($results['address_skipped']) .
        ' org address were not imported. See log for details.');
    }
  }
  else {
    // $operations contains the operations that remained unprocessed.
    $error_operation = reset($operations);
    $message = t('An error occurred while processing %error_operation with arguments: @arguments',
      array(
        '%error_operation' => $error_operation[0],
        '@arguments' => print_r($error_operation[1],
          TRUE),
      )
    );
    drupal_set_message($message, 'error');
  }
}


/**
 * Implements hook_preprocess_views_view_table().
 */
function iasc_contact_preprocess_views_view_table(&$vars) {
  if ('search_contacts' == $vars['view']->name) {
    $rows = $vars['rows'];
    $len = count($rows);
    for ($i = 0; $i < $len; $i++) {
      // field_last_name is a combination of the Title, First Name and Last Name fields.
      // This combination is made in the table settings for the view display.
      // We want to have the final name ouput link to the node.
      $rows[$i]['field_last_name'] = l($rows[$i]['field_last_name'], "node/{$vars['result'][$i]->nid}");
    }

    $vars['rows'] = $rows;
  }
}
