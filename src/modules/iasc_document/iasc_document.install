<?php

/**
 * @file
 * Install file for IASC Document.
 */

/**
 * Implements hook_install().
 */
function iasc_document_install() {
  // We have to make these changes because the following are faux features.
  $doc = node_type_load('oa_wiki_page');
  $t = get_t();
  $doc->name = $t('Document/Product');
  $doc->description = $t('Create a Document or Product page.');
  $doc->modified = TRUE;
  $doc->locked = 1;
  node_type_save($doc);
}

/**
 * Implements hook_uninstall().
 */
function iasc_document_uninstall() {
  // Revert back to the original setup for OA Document Page.
  $doc = node_type_load('oa_wiki_page');
  $t = get_t();
  $doc->name = $t('Document Page');
  $doc->description = $t('An Open Atrium Document/Wiki page');
  $doc->modified = TRUE;
  $doc->locked = 1;
  node_type_save($doc);

  // Remove document_types vocabulary.
  $meeting_type = taxonomy_vocabulary_machine_name_load('document_types');
  if (!empty($meeting_type)) {
    taxonomy_vocabulary_delete($meeting_type->vid);
  }

  // Remove product_categories vocabulary.
  $meeting_type = taxonomy_vocabulary_machine_name_load('product_categories');
  if (!empty($meeting_type)) {
    taxonomy_vocabulary_delete($meeting_type->vid);
  }
}

/**
 * Connect files to documents missing files.
 */
function iasc_document_update_7001() {
  // Query for document nodes that don't have files attached.
  // Need documents without a value in field_oa_media and a non-blank filename.
  $sql = "select n.nid, n.title, isc.managed_fid, isc.legacy_fid, isc.filename
          from node n
          left join field_data_field_oa_media oam on n.nid = oam.entity_id
          left join iasc_scrape isc on n.nid = isc.entity_id
          where oam.entity_id is null
          and n.type = 'oa_wiki_page'
          and isc.filename <> ''
          and isc.managed_fid <> 0
          and n.nid <> 0";

  // Execute query.
  $non_connected_docs = db_query($sql)->fetchAll();

  // Show number of results.
  $count = count($non_connected_docs);
  print_r(t('Number of documents to update: @count', array('@count' => $count)));
  print_r("\r\n");

  // Go through each result and save document.
  foreach ($non_connected_docs as $non_connected_doc) {
    $entity_id = $non_connected_doc->nid;
    $file = file_load($non_connected_doc->managed_fid);
    if ($entity_id && $file) {
      $wrapper = entity_metadata_wrapper('node', $entity_id);
      $entity = $wrapper->value();

      // Add more properties to file as it is needed to save.
      $file->display = 1;
      $fid = $file->fid;

      // This is insane.
      $file = (array) $file;
      $items = array($file);
      $wrapper->field_oa_media->set($items);

      // Save the entity.
      $wrapper->save(TRUE);
      entity_save('node', $entity);
      print_r(t('File @fid connected to node @nid.', array(
        '@fid' => $fid,
        '@nid' => $entity->nid,
      )));
      print_r("\r\n");
      print_r('-----------------');
      print_r("\r\n");
    }
  }
}

/**
 * Set all document nodes to show node instead of file on node view.
 */
function iasc_document_update_7002() {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'oa_wiki_page')
    ->propertyOrderBy('nid', 'ASC');

  $result = $query->execute();

  if (isset($result['node'])) {
    $nids = array_keys($result['node']);
    $nodes = node_load_multiple($nids);

    foreach ($nodes as $node) {
      $node->field_oa_wiki_page_no_redirect[LANGUAGE_NONE][0]['value'] = TRUE;
      node_save($node);
    }
  }
}

/**
 * Implements hook_update_N().
 *
 * Split Products into IASC Products and Other Products and update existing nodes.
 */
function iasc_document_update_7003() {
  // Get the vocabulary for Document Type.
  $vocab = taxonomy_vocabulary_machine_name_load('document_types');

  if (!$vocab) {
    throw new DrupalUpdateException('Missing vocabulary for Document Types.');
  }

  // Create the new taxonomy terms for the Document types.
  $iasc_product = new stdClass();
  $iasc_product->name = t('IASC Product');
  $iasc_product->vid = $vocab->vid;

  if (!taxonomy_term_save($iasc_product)) {
    throw new DrupalUpdateException('Couldn\'t save IASC Product term.');
  }
  watchdog('iasc_document', 'Added term: IASC Product');

  $other_product = new stdClass();
  $other_product->name = t('Other Product');
  $other_product->vid = $vocab->vid;
  if (!taxonomy_term_save($other_product)) {
    throw new DrupalUpdateException('Couldn\'t save Other Product term.');
  }
  watchdog('iasc_document', 'Added term: Other Product');

  // Get all Document nodes that are Products.
  $product_term = taxonomy_get_term_by_name('Product', 'document_types');
  if (empty($product_term)) {
    throw new DrupalUpdateException('Couldn\'t load Product term.');
  }
  $product_term = array_shift($product_term);

  $result = db_query('SELECT entity_id
    FROM {field_data_field_document_type}
    WHERE field_document_type_tid = :tid;', array(':tid' => $product_term->tid))
    ->fetchAll();

  if ($result) {
    // If Document's Authoring Body is "Other", set Document Type to Other
    // Products.
    $other_space_nid = db_query("SELECT nid
      FROM {node}
      WHERE type = 'oa_space' AND title = 'Other'")
      ->fetchField();

    foreach ($result as $node) {
      $document = node_load($node->entity_id);
      $wrapper = entity_metadata_wrapper('node', $document);

      if ($other_space_nid == $wrapper->og_group_ref->value()->nid) {
        $wrapper->field_document_type->set($other_product->tid);
      }
      else {
        // Else set the type to IASC Products.
        $wrapper->field_document_type->set($iasc_product->tid);
      }

      $wrapper->save();
      watchdog('iasc_document', 'Updated node: %nid with term: %term', array(
        '%nid' => $document->nid,
        '%term' => $wrapper->field_document_type->value()->name,
      ));
    }
  }

  // Delete the old taxonomy term "Product".
  taxonomy_term_delete($product_term->tid);
  watchdog('iasc_document', 'Deleted term: Product');
}